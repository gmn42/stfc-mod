
syntax="proto3";

option optimize_for = LITE_RUNTIME;

import "google/protobuf/timestamp.proto";

import "stfc.proto";

package Digit.PrimeServer.Models;

enum EntityType {
  ENTITYTYPE_INVALID = 0;
  ENTITYTYPE_PLAYER = 859804212;
  ENTITYTYPE_ALLIANCE = 1794481137;
  ENTITYTYPE_DEPLOYEDFLEET = 2129559302;
  ENTITYTYPE_NPC = 2100681965;
  ENTITYTYPE_OFFICERS = 1211023646;
  ENTITYTYPE_SHIP = 73015892;
  ENTITYTYPE_SYSTEM = 232004982;
  ENTITYTYPE_PARTY = 2028949976;
  ENTITYTYPE_GAMEWORLD = 1025095082;
}

message EntityRef {
  int64 entityId = 1;
  string entityIdStr = 2;
  EntityType entityType = 3;
  EntityRef parentEntity = 4;
}

enum FleetSkillsType {
  FLEETSKILLSTYPE_NONE = 0;
  FLEETSKILLSTYPE_INSTANTWARP = 1;
  FLEETSKILLSTYPE_TOWING = 2;
  FLEETSKILLSTYPE_CLOAKING = 3;
  FLEETSKILLSTYPE_SUPPORT = 4;
  FLEETSKILLSTYPE_DISRUPT = 5;
}

enum PartyType {
  PARTYTYPE_NONE = 0;
  PARTYTYPE_UNKNOWNPARTYTYPE = -1;
  PARTYTYPE_INSTANCEDPVP = 1;
  PARTYTYPE_INSTANCEDPVPPUBLIC = 2;
}

enum PartyState {
  PARTYSTATE_NONE = 0;
  PARTYSTATE_UNKNOWNPARTYSTATE = -1;
  PARTYSTATE_IDLE = 1;
  PARTYSTATE_READY = 2;
  PARTYSTATE_INMATCHMAKING = 3;
  PARTYSTATE_INGAMEACTIVITY = 4;
}

enum RarityState {
  RARITYSTATE_BASE = 0;
  RARITYSTATE_COMMON = 1;
  RARITYSTATE_UNCOMMON = 2;
  RARITYSTATE_RARE = 3;
  RARITYSTATE_EPIC = 4;
  RARITYSTATE_NONE = -1;
}

enum ActionType {
  ACTIONTYPE_NONE = 0;
  ACTIONTYPE_INVALID = -1;
  ACTIONTYPE_UPGRADE = 1433481724;
  ACTIONTYPE_PURCHASE = 1807968545;
  ACTIONTYPE_MANAGE = -1997567611;
  ACTIONTYPE_HARVEST = -1933286583;
  ACTIONTYPE_REPAIR = -1850668115;
  ACTIONTYPE_VIEW = 2666181;
  ACTIONTYPE_RECALL = -1851055311;
  ACTIONTYPE_PROMOTE = 1355442080;
  ACTIONTYPE_DEMOTE = 2043415476;
  ACTIONTYPE_MOVE = 2404337;
  ACTIONTYPE_ATTACK = 1971575400;
  ACTIONTYPE_ASSIGN = 1970629903;
  ACTIONTYPE_ADD = 65665;
  ACTIONTYPE_REMOVE = -1850743644;
  ACTIONTYPE_CLAIM = 65189916;
  ACTIONTYPE_CHAT = 2099064;
  ACTIONTYPE_HELP = 2245473;
  ACTIONTYPE_INVITE = -2099832023;
  ACTIONTYPE_REPORT = -1850654380;
  ACTIONTYPE_COPY = 2106261;
  ACTIONTYPE_SHARE = 79847359;
  ACTIONTYPE_UPGRADETRAIT = -2019808789;
}

enum ActivatedAbilityCostType {
  ACTIVATEDABILITYCOSTTYPE_NONE = 0;
  ACTIVATEDABILITYCOSTTYPE_UNKNOWNABILITYCOSTTYPE = -1;
  ACTIVATEDABILITYCOSTTYPE_RESOURCE = 1;
  ACTIVATEDABILITYCOSTTYPE_COUNTER = 2;
}

enum ActivationSource {
  ACTIVATIONSOURCE_NONE = 0;
  ACTIVATIONSOURCE_UNKNOWNACTIVATIONSOURCE = -1;
  ACTIVATIONSOURCE_MANUAL = 1;
  ACTIVATIONSOURCE_POSTBATTLE = 2;
}

enum Domain {
  DOMAIN_NONE = 0;
  DOMAIN_INVALID = -1;
  DOMAIN_SHIP = 2575964;
  DOMAIN_OFFICERS = -700648931;
  DOMAIN_RESOURCES = 20897285;
  DOMAIN_STARBASE = 1380907075;
  DOMAIN_MODULES = -1402880153;
  DOMAIN_RESEARCH = -286251589;
  DOMAIN_FLEET = 67964206;
  DOMAIN_SHOP = 2576150;
  DOMAIN_MISSIONS = -1142156153;
  DOMAIN_ALLIANCES = -2110300420;
  DOMAIN_DIALOGUES = -950173317;
  DOMAIN_USERS = 82025960;
  DOMAIN_POI = 79402;
  DOMAIN_CHAT = 2099064;
  DOMAIN_TOURNAMENTS = 856853386;
  DOMAIN_LEADERBOARDS = -1184310090;
  DOMAIN_ARMADA = 1969519842;
  DOMAIN_BOOKMARKS = -253812259;
  DOMAIN_AWAYTEAMS = -846070968;
  DOMAIN_FORBIDDENTECH = -696223371;
  DOMAIN_MINIGAMES = 1618762116;
}

enum GameActivityPhaseType {
  GAMEACTIVITYPHASETYPE_UNKNOWNGAMEACTIVITYPHASETYPE = 0;
  GAMEACTIVITYPHASETYPE_ENTRY = 1355282435;
  GAMEACTIVITYPHASETYPE_MAIN = 1533889672;
  GAMEACTIVITYPHASETYPE_EXIT = 896018137;
}

enum HazardType {
  HAZARDTYPE_NONE = 0;
  HAZARDTYPE_INVALID = -1;
  HAZARDTYPE_TYPEA = 1;
  HAZARDTYPE_TYPEB = 2;
  HAZARDTYPE_TYPEC = 3;
  HAZARDTYPE_TYPED = 4;
  HAZARDTYPE_TYPEE = 5;
}

enum HazardEffect {
  HAZARDEFFECT_NONE = 0;
  HAZARDEFFECT_INVALID = -1;
  HAZARDEFFECT_DOT = 1;
}

enum StatusCounterType {
  STATUSCOUNTERTYPE_NONE = 0;
  STATUSCOUNTERTYPE_UNKNOWNSTATUSCOUNTER = -1;
  STATUSCOUNTERTYPE_ASSIMILATIONPOINTS = 1;
}

enum BuildStatus {
  BUILDSTATUS_NONE = 0;
  BUILDSTATUS_INVALID = -1;
  BUILDSTATUS_BUILDAVAILABLE_REQUIREMENTS_NOT_MET = -196463803;
  BUILDSTATUS_READYTOBUILD = -437444176;
  BUILDSTATUS_UPGRADEAVAILABLE_REQUIREMENTS_NOT_MET = 1632201331;
  BUILDSTATUS_UPGRADEAVAILABLE_REQUIREMENTS_MET = 309998463;
  BUILDSTATUS_UPGRADEINPROGRESS = 2047869326;
  BUILDSTATUS_UPGRADECOMPLETE = 1093471061;
  BUILDSTATUS_MAXUPGRADEREACHED = -1300075014;
}

enum AccountState {
  ACCOUNTSTATE_CONSISTENT = 0;
  ACCOUNTSTATE_INCONSISTENT = 1;
  ACCOUNTSTATE_UNKNOWN = 2;
}

enum AllianceDiplomacyStatus {
  ALLIANCEDIPLOMACYSTATUS_NEUTRAL = 0;
  ALLIANCEDIPLOMACYSTATUS_ENEMY = 1;
  ALLIANCEDIPLOMACYSTATUS_FRIENDLY = 2;
  ALLIANCEDIPLOMACYSTATUS_ALLY = 3;
  ALLIANCEDIPLOMACYSTATUS_UNFRIENDLY = 4;
  ALLIANCEDIPLOMACYSTATUS_CAUTION = 5;
  ALLIANCEDIPLOMACYSTATUS_CIVIL = 6;
}

enum ArmadaAttackState {
  ARMADAATTACKSTATE_IDLE = 0;
  ARMADAATTACKSTATE_PREBATTLE = 1;
  ARMADAATTACKSTATE_BATTLING = 2;
  ARMADAATTACKSTATE_DISBANDEDALLIANCELEADERLEFT = 3;
  ARMADAATTACKSTATE_DISBANDEDTARGETRELOCATED = 4;
  ARMADAATTACKSTATE_DISBANDEDTARGETDESTROYED = 5;
  ARMADAATTACKSTATE_DISBANDEDTARGETSHIELDED = 6;
  ARMADAATTACKSTATE_DISBANDEDTARGETNOTSUPPORTED = 7;
  ARMADAATTACKSTATE_DISBANDEDNOELIGIBLEFLEET = 8;
  ARMADAATTACKSTATE_DISBANDEDNOLEADERFLEET = 9;
  ARMADAATTACKSTATE_DISBANDEDEXPIRED = 10;
  ARMADAATTACKSTATE_DISBANDEDINVALIDSTATE = 11;
  ARMADAATTACKSTATE_BATTLEFINISHEDWIN = 12;
  ARMADAATTACKSTATE_BATTLEFINISHEDLOSS = 13;
}

enum ArmadaTargetType {
  ARMADATARGETTYPE_NONE = 0;
  ARMADATARGETTYPE_STATION = 1;
  ARMADATARGETTYPE_FLEET = 2;
  ARMADATARGETTYPE_ALLIANCESTATION = 3;
}

enum FleetArmadaCategory {
  FLEETARMADACATEGORY_REGULAR = 0;
  FLEETARMADACATEGORY_SOLO = 1;
  FLEETARMADACATEGORY_SOLOBOSS = 2;
  FLEETARMADACATEGORY_SQUADARMADA = 3;
}

enum Rarity {
  RARITY_BASE = 0;
  RARITY_COMMON = 1;
  RARITY_UNCOMMON = 2;
  RARITY_RARE = 3;
  RARITY_EPIC = 4;
}

enum OfficerCoreStatType {
  OFFICERCORESTATTYPE_UNASSIGNED = 0;
  OFFICERCORESTATTYPE_ATTACK = 1;
  OFFICERCORESTATTYPE_DEFENSE = 2;
  OFFICERCORESTATTYPE_HEALTH = 3;
}

enum AwayAssignmentState {
  AWAYASSIGNMENTSTATE_UNKNOWN = 0;
  AWAYASSIGNMENTSTATE_READYTOSTART = 1;
  AWAYASSIGNMENTSTATE_INPROGRESS = 2;
  AWAYASSIGNMENTSTATE_READYFORCOLLECTION = 3;
  AWAYASSIGNMENTSTATE_READYFORCOLLECTIONREFRESHED = 4;
  AWAYASSIGNMENTSTATE_COLLECTED = 5;
}

enum AwayAssignmentOutcome {
  AWAYASSIGNMENTOUTCOME_UNKNOWN = 0;
  AWAYASSIGNMENTOUTCOME_FAIL = 1;
  AWAYASSIGNMENTOUTCOME_SUCCESS = 2;
  AWAYASSIGNMENTOUTCOME_CRITICALSUCCESS = 3;
}

enum BuffSource {
  BUFFSOURCE_OFFICER = 0;
  BUFFSOURCE_CAPTUREOBJECT = 1;
  BUFFSOURCE_CONSUMABLE = 2;
  BUFFSOURCE_SHIPBONUS = 3;
  BUFFSOURCE_SHIPTIERBONUS = 4;
  BUFFSOURCE_SHIPLEVELBONUS = 5;
  BUFFSOURCE_STARBASEMODULE = 6;
  BUFFSOURCE_RESEARCH = 7;
  BUFFSOURCE_FORBIDDENTECH = 8;
}

enum HullType {
  HULLTYPE_DESTROYER = 0;
  HULLTYPE_SURVEY = 1;
  HULLTYPE_EXPLORER = 2;
  HULLTYPE_BATTLESHIP = 3;
  HULLTYPE_DEFENSE = 4;
  HULLTYPE_ARMADATARGET = 5;
  HULLTYPE_ANY = -1;
}

enum GraphNodeConnectionRequirementType {
  GRAPHNODECONNECTIONREQUIREMENTTYPE_NONEXISTENT = 0;
  GRAPHNODECONNECTIONREQUIREMENTTYPE_NONE = 1;
  GRAPHNODECONNECTIONREQUIREMENTTYPE_MISSION = 2;
  GRAPHNODECONNECTIONREQUIREMENTTYPE_RESOURCE = 3;
}

enum DeployedFleetState {
  DEPLOYEDFLEETSTATE_IDLE = 0;
  DEPLOYEDFLEETSTATE_MOVING = 1;
  DEPLOYEDFLEETSTATE_WARPING = 2;
  DEPLOYEDFLEETSTATE_BATTLING = 3;
  DEPLOYEDFLEETSTATE_RECALL = 4;
  DEPLOYEDFLEETSTATE_DOCKED = 5;
  DEPLOYEDFLEETSTATE_PREBATTLE = 6;
}

enum DeployedFleetType {
  DEPLOYEDFLEETTYPE_NONEXISTENT = 0;
  DEPLOYEDFLEETTYPE_PLAYER = 1;
  DEPLOYEDFLEETTYPE_MARAUDER = 2;
  DEPLOYEDFLEETTYPE_NPCINSTANTIATED = 3;
  DEPLOYEDFLEETTYPE_SENTINEL = 4;
  DEPLOYEDFLEETTYPE_ALLIANCE = 5;
  DEPLOYEDFLEETTYPE_CHALLENGE = 6;
}

enum DamageSources {
  DAMAGESOURCES_ENEMYFLEET = 0;
  DAMAGESOURCES_NOTSET = -1;
  DAMAGESOURCES_HAZARD = 2;
}

enum TargetAction {
  TARGETACTION_RETURN = 0;
  TARGETACTION_ORBIT = 1;
  TARGETACTION_ATTACK = 2;
  TARGETACTION_CAPTURE = 4;
  TARGETACTION_DOCK = 5;
  TARGETACTION_ATTACKSTATION = 6;
  TARGETACTION_ARMADAATTACKJOIN = 7;
  TARGETACTION_NULL = -1;
}

enum ForbiddenTechUpgradeType {
  FORBIDDENTECHUPGRADETYPE_FORBIDDENTECHUPGRADENONE = 0;
  FORBIDDENTECHUPGRADETYPE_FORBIDDENTECHUPGRADELEVEL = 1;
  FORBIDDENTECHUPGRADETYPE_FORBIDDENTECHUPGRADETIER = 2;
}

enum ForbiddenTechType {
  FORBIDDENTECHTYPE_UNKNOWNTYPE = 0;
  FORBIDDENTECHTYPE_PVE = 1;
  FORBIDDENTECHTYPE_PVP = 2;
}

enum ForbiddenTechSubType {
  FORBIDDENTECHSUBTYPE_UNKNOWNSUBTYPE = 0;
  FORBIDDENTECHSUBTYPE_MINING = 1;
  FORBIDDENTECHSUBTYPE_EVASION = 2;
  FORBIDDENTECHSUBTYPE_DEFENSE = 3;
  FORBIDDENTECHSUBTYPE_ARMADAS = 4;
  FORBIDDENTECHSUBTYPE_STATION = 5;
  FORBIDDENTECHSUBTYPE_OFFENSE = 6;
  FORBIDDENTECHSUBTYPE_HOSTILES = 7;
  FORBIDDENTECHSUBTYPE_EXPLORATION = 8;
}

enum ClientModifierType {
  CLIENTMODIFIERTYPE_MODENERGYDAMAGE = 0;
  CLIENTMODIFIERTYPE_MODKINETICDAMAGE = 1;
  CLIENTMODIFIERTYPE_MODALLDAMAGE = 2;
  CLIENTMODIFIERTYPE_MODSHOTSPERATTACK = 3;
  CLIENTMODIFIERTYPE_MODALLLOADSPEED = 4;
  CLIENTMODIFIERTYPE_MODALLRELOADSPEED = 5;
  CLIENTMODIFIERTYPE_MODACCURACY = 6;
  CLIENTMODIFIERTYPE_MODARMORPIERCING = 7;
  CLIENTMODIFIERTYPE_MODSHIELDPIERCING = 8;
  CLIENTMODIFIERTYPE_MODCRITCHANCE = 9;
  CLIENTMODIFIERTYPE_MODCRITDAMAGE = 10;
  CLIENTMODIFIERTYPE_MODSHIPDODGE = 11;
  CLIENTMODIFIERTYPE_MODSHIPARMOR = 12;
  CLIENTMODIFIERTYPE_MODSHIELDS = 13;
  CLIENTMODIFIERTYPE_MODCPTMANEUVEREFFECT = 14;
  CLIENTMODIFIERTYPE_MODOFFABILITYEFFECT = 15;
  CLIENTMODIFIERTYPE_MODSHIELDHPREPAIR = 16;
  CLIENTMODIFIERTYPE_MODHULLHPREPAIR = 17;
  CLIENTMODIFIERTYPE_MODADDSTATE = 18;
  CLIENTMODIFIERTYPE_MODREMOVESTATE = 19;
  CLIENTMODIFIERTYPE_MODPARSTEELPROTECTION = 20;
  CLIENTMODIFIERTYPE_MODTRITANIUMPROTECTION = 21;
  CLIENTMODIFIERTYPE_MODDILITHIUMPROTECTION = 22;
  CLIENTMODIFIERTYPE_MODCOMBATPARSTEELREWARD = 23;
  CLIENTMODIFIERTYPE_MODCOMBATTRITANIUMREWARD = 24;
  CLIENTMODIFIERTYPE_MODCOMBATDILITHIUMREWARD = 25;
  CLIENTMODIFIERTYPE_MODCOMBATPARSTEELT2REWARD = 60001;
  CLIENTMODIFIERTYPE_MODCOMBATTRITANIUMT2REWARD = 60002;
  CLIENTMODIFIERTYPE_MODCOMBATDILITHIUMT2REWARD = 60003;
  CLIENTMODIFIERTYPE_MODCOMBATINTELREWARD = 26;
  CLIENTMODIFIERTYPE_MODCOMBATLOOTDROPCHANCE = 27;
  CLIENTMODIFIERTYPE_MODCOMBATLOOTDROPQUANTITY = 28;
  CLIENTMODIFIERTYPE_MODCOMBATXPREWARD = 29;
  CLIENTMODIFIERTYPE_MODMISSIONSPARSTEELREWARD = 30;
  CLIENTMODIFIERTYPE_MODMISSIONSTRITANIUMREWARD = 31;
  CLIENTMODIFIERTYPE_MODMISSIONSDILITHIUMREWARD = 32;
  CLIENTMODIFIERTYPE_MODMISSIONSINTELREWARD = 33;
  CLIENTMODIFIERTYPE_MODMISSIONSLOOTDROPCHANCE = 34;
  CLIENTMODIFIERTYPE_MODMISSIONSLOOTDROPQUANTITY = 35;
  CLIENTMODIFIERTYPE_MODMISSIONSXPREWARD = 36;
  CLIENTMODIFIERTYPE_MODFACTIONPOINTSFEDERATIONREWARD = 37;
  CLIENTMODIFIERTYPE_MODFACTIONPOINTSKLINGONREWARD = 38;
  CLIENTMODIFIERTYPE_MODFACTIONPOINTSROMULANREWARD = 39;
  CLIENTMODIFIERTYPE_MODFACTIONPOINTSALLREWARD = 40;
  CLIENTMODIFIERTYPE_MODMININGRATEPARSTEEL = 41;
  CLIENTMODIFIERTYPE_MODMININGRATETRITANIUM = 42;
  CLIENTMODIFIERTYPE_MODMININGRATEDILITHIUM = 43;
  CLIENTMODIFIERTYPE_MODMININGRATEORE = 44;
  CLIENTMODIFIERTYPE_MODMININGRATEHYDROCARBON = 45;
  CLIENTMODIFIERTYPE_MODMININGREWARDPARSTEEL = 46;
  CLIENTMODIFIERTYPE_MODMININGREWARDTRITANIUM = 47;
  CLIENTMODIFIERTYPE_MODMININGREWARDDILITHIUM = 48;
  CLIENTMODIFIERTYPE_MODMININGREWARDORE = 49;
  CLIENTMODIFIERTYPE_MODMININGREWARDHYDROCARBON = 50;
  CLIENTMODIFIERTYPE_MODREPAIRCOSTSPARSTEEL = 51;
  CLIENTMODIFIERTYPE_MODREPAIRCOSTSTRITANIUM = 52;
  CLIENTMODIFIERTYPE_MODREPAIRCOSTSDILITHIUM = 53;
  CLIENTMODIFIERTYPE_MODREPAIRCOSTSALL = 54;
  CLIENTMODIFIERTYPE_MODREPAIRTIME = 55;
  CLIENTMODIFIERTYPE_MODOFFICERSTATATTACK = 56;
  CLIENTMODIFIERTYPE_MODOFFICERSTATDEFENSE = 57;
  CLIENTMODIFIERTYPE_MODOFFICERSTATHEALTH = 58;
  CLIENTMODIFIERTYPE_MODOFFICERSTATALL = 59;
  CLIENTMODIFIERTYPE_MODSHIELDHPMAX = 60;
  CLIENTMODIFIERTYPE_MODHULLHPMAX = 61;
  CLIENTMODIFIERTYPE_MODIMPULSESPEED = 62;
  CLIENTMODIFIERTYPE_MODWARPSPEED = 63;
  CLIENTMODIFIERTYPE_MODWARPDISTANCE = 64;
  CLIENTMODIFIERTYPE_MODENTERWARPDELAY = 65;
  CLIENTMODIFIERTYPE_MODCARGOCAPACITY = 66;
  CLIENTMODIFIERTYPE_MODCARGOPROTECTION = 67;
  CLIENTMODIFIERTYPE_MODCARGOGENERATION = 809;
  CLIENTMODIFIERTYPE_MODAUTORECALL = 68;
  CLIENTMODIFIERTYPE_MODENERGYLOADSPEED = 69;
  CLIENTMODIFIERTYPE_MODKINETICLOADSPEED = 70;
  CLIENTMODIFIERTYPE_MODENERGYRELOADSPEED = 71;
  CLIENTMODIFIERTYPE_MODKINETICRELOADSPEED = 72;
  CLIENTMODIFIERTYPE_MODALLDEFENSES = 73;
  CLIENTMODIFIERTYPE_MODALLPIERCING = 74;
  CLIENTMODIFIERTYPE_MODSHIELDREGENTIME = 75;
  CLIENTMODIFIERTYPE_MODSHIELDMITIGATION = 76;
  CLIENTMODIFIERTYPE_MODHAZARDTYPEAMITIGATION = 810;
  CLIENTMODIFIERTYPE_MODHAZARDTYPEBMITIGATION = 811;
  CLIENTMODIFIERTYPE_MODHAZARDTYPECMITIGATION = 812;
  CLIENTMODIFIERTYPE_MODHAZARDTYPEDMITIGATION = 813;
  CLIENTMODIFIERTYPE_MODHAZARDBASEMITIGATION = 814;
  CLIENTMODIFIERTYPE_MODHAZARDTYPEEMITIGATION = 815;
  CLIENTMODIFIERTYPE_MODRESOURCEPROTECTION = 100;
  CLIENTMODIFIERTYPE_MODCOMBATRESOURCEREWARD = 101;
  CLIENTMODIFIERTYPE_MODMISSIONRESOURCEREWARD = 102;
  CLIENTMODIFIERTYPE_MODFACTIONPOINTSREWARDS = 103;
  CLIENTMODIFIERTYPE_MODFACTIONPOINTSLOSSES = 104;
  CLIENTMODIFIERTYPE_MODMININGRATE = 105;
  CLIENTMODIFIERTYPE_MODMININGREWARD = 106;
  CLIENTMODIFIERTYPE_MODREPAIRCOSTS = 107;
  CLIENTMODIFIERTYPE_MODSTARBASEMODULECONSTRUCTIONSPEED = 108;
  CLIENTMODIFIERTYPE_MODSTARBASEMODULECONSTRUCTIONCOST = 109;
  CLIENTMODIFIERTYPE_MODRESEARCHSPEED = 110;
  CLIENTMODIFIERTYPE_MODRESEARCHCOST = 111;
  CLIENTMODIFIERTYPE_MODRESOURCEGENERATION = 112;
  CLIENTMODIFIERTYPE_MODRESOURCESTORAGE = 113;
  CLIENTMODIFIERTYPE_MODFORCEFIELDRECHARGESPEED = 114;
  CLIENTMODIFIERTYPE_MODFORCEFIELDHP = 115;
  CLIENTMODIFIERTYPE_MODCOMPONENTCOST = 116;
  CLIENTMODIFIERTYPE_MODSHIPCONSTRUCTIONSPEED = 117;
  CLIENTMODIFIERTYPE_MODSHIPCONSTRUCTIONCOST = 118;
  CLIENTMODIFIERTYPE_MODTIERUPSPEED = 119;
  CLIENTMODIFIERTYPE_MODFACTIONPOINTSPENALTYRECUTION = 120;
  CLIENTMODIFIERTYPE_MODFACTIONSTORELOOTBONUS = 121;
  CLIENTMODIFIERTYPE_MODOFFICERLEVELUPCOST = 122;
  CLIENTMODIFIERTYPE_MODOFFICERPROMOTECOST = 123;
  CLIENTMODIFIERTYPE_MODSCANSHIP = 124;
  CLIENTMODIFIERTYPE_MODSCANSTATION = 125;
  CLIENTMODIFIERTYPE_MODSCANSYSTEM = 126;
  CLIENTMODIFIERTYPE_MODINCOMINGSTATIONATTACKINFORMATION = 127;
  CLIENTMODIFIERTYPE_MODINCOMINGSTATIONATTACKADVANCEDWARNING = 128;
  CLIENTMODIFIERTYPE_MODSHIPSCRAPRESOURCEBONUS = 129;
  CLIENTMODIFIERTYPE_MODSHIPSCRAPLOOTBONUS = 130;
  CLIENTMODIFIERTYPE_MODSHIPSCRAPSPEED = 131;
  CLIENTMODIFIERTYPE_MODAWAYMISSIONSPEED = 132;
  CLIENTMODIFIERTYPE_MODAWAYMISSIONRESOURCEREWARDS = 133;
  CLIENTMODIFIERTYPE_MODAWAYMISSIONLOOTBONUS = 134;
  CLIENTMODIFIERTYPE_MODRESOURCEPRODUCERRESOURCESTORAGE = 135;
  CLIENTMODIFIERTYPE_MODWAREHOUSERESOURCESTORAGE = 136;
  CLIENTMODIFIERTYPE_MODVAULTRESOURCESTORAGE = 137;
  CLIENTMODIFIERTYPE_MODHULLID = 138;
  CLIENTMODIFIERTYPE_MODSHIPINVENTORYSIZE = 139;
  CLIENTMODIFIERTYPE_MODSCANCOST = 140;
  CLIENTMODIFIERTYPE_MODTRADETAX = 141;
  CLIENTMODIFIERTYPE_MODREPAIRSTATION = 142;
  CLIENTMODIFIERTYPE_MODARMADASIZE = 143;
  CLIENTMODIFIERTYPE_MODCOMBATPVEREWARDS = 145;
  CLIENTMODIFIERTYPE_MODCOMBATOUTLAWSREWARDS = 146;
  CLIENTMODIFIERTYPE_MODJUMPANDTOWCOSTEFF = 147;
  CLIENTMODIFIERTYPE_MODCOMBATBORGREWARDS = 148;
  CLIENTMODIFIERTYPE_MODCOMBATARMADAREWARDS = 149;
  CLIENTMODIFIERTYPE_MODSKILLCLOAKINGCOOLDOWN = 150;
  CLIENTMODIFIERTYPE_MODSKILLCLOAKINGDURATION = 151;
  CLIENTMODIFIERTYPE_MODSKILLCLOAKINGCOST = 152;
  CLIENTMODIFIERTYPE_MODSKILLCLOAKINGSNEAKCHANCE = 153;
  CLIENTMODIFIERTYPE_MODSKILLCLOAKINGREVEALCHANCE = 154;
  CLIENTMODIFIERTYPE_MODSKILLCLOAKINGRESETCLOAKINGCOOLDOWN = 155;
  CLIENTMODIFIERTYPE_MODCOMBATPLUNDEREDCARGOREWARDS = 156;
  CLIENTMODIFIERTYPE_MODSKILLSUPPORTSHIPABILITYCOOLDOWN = 157;
  CLIENTMODIFIERTYPE_MODSKILLSUPPORTSHIPABILITYDURATION = 158;
  CLIENTMODIFIERTYPE_MODSKILLSUPPORTSHIPABILITYCOST = 159;
  CLIENTMODIFIERTYPE_MODSKILLSUPPORTSHIPABILITYDURATIONPERCENTAGE = 160;
  CLIENTMODIFIERTYPE_MODCOMBATACTIANVENOMREWARDS = 161;
  CLIENTMODIFIERTYPE_MODSKILLDEBUFFDURATION = 162;
  CLIENTMODIFIERTYPE_MODSKILLDEBUFFCOST = 163;
  CLIENTMODIFIERTYPE_MODSKILLDEBUFFDURATIONPERCENTAGE = 164;
  CLIENTMODIFIERTYPE_MODDEPOSITORYSTORAGE = 165;
  CLIENTMODIFIERTYPE_MODRELOCATIONRANGE = 166;
  CLIENTMODIFIERTYPE_MODANTICLOAKING = 167;
  CLIENTMODIFIERTYPE_MODCOMBATUNCOMMONARMADAREWARDS = 170;
  CLIENTMODIFIERTYPE_MODCOMBATRAREARMADAREWARDS = 171;
  CLIENTMODIFIERTYPE_MODCOMBATEPICARMADAREWARDS = 172;
  CLIENTMODIFIERTYPE_MODCOMBATUNCOMMONOUTLAWARMADAREWARDS = 173;
  CLIENTMODIFIERTYPE_MODCOMBATRAREOUTLAWARMADAREWARDS = 174;
  CLIENTMODIFIERTYPE_MODCOMBATEPICOUTLAWARMADAREWARDS = 175;
  CLIENTMODIFIERTYPE_MODCOMBATSOURCEARMADAREWARDS = 176;
  CLIENTMODIFIERTYPE_MODCOMBATJEMHADARREWARDS = 177;
  CLIENTMODIFIERTYPE_MODCOMBATSOURCESOLOARMADAREWARDS = 178;
  CLIENTMODIFIERTYPE_MODPRECOMBATSOLOARMADAELITECREDITREWARDS = 179;
  CLIENTMODIFIERTYPE_MODSKILLARMADASUPPORTABILITYCOOLDOWN = 201;
  CLIENTMODIFIERTYPE_MODSKILLARMADASUPPORTDURATION = 202;
  CLIENTMODIFIERTYPE_MODSKILLARMADASUPPORTCOST = 203;
  CLIENTMODIFIERTYPE_MODSKILLARMADASUPPORTDURATIONPERCENTAGE = 204;
  CLIENTMODIFIERTYPE_MODCOMBATOFFICERPAKLEDREWARDS = 205;
  CLIENTMODIFIERTYPE_MODPRECOMBATSOLOARMADABORGREWARDS = 206;
  CLIENTMODIFIERTYPE_MODCOMBATBORGVINCULUMFRAGMENTSREWARDS = 207;
  CLIENTMODIFIERTYPE_MODCOMBATG4G5ALLSHIPPARTSREWARDS = 209;
  CLIENTMODIFIERTYPE_MODCOMBATG4G5BATTLESHIPSHIPPARTSREWARDS = 213;
  CLIENTMODIFIERTYPE_MODCOMBATG4G5DESTROYERSHIPPARTSREWARDS = 211;
  CLIENTMODIFIERTYPE_MODCOMBATG4G5EXPLORERSHIPPARTSREWARDS = 212;
  CLIENTMODIFIERTYPE_MODCOMBATARTIFACTGACHAREWARDS = 215;
  CLIENTMODIFIERTYPE_MODCOMBATCOMPLEXNANOTECHREWARDS = 217;
  CLIENTMODIFIERTYPE_MODSKILLCUTTINGBEAMABILITYCOST = 226;
  CLIENTMODIFIERTYPE_MODSKILLCUTTINGBEAMPVEBASEDAMAGEPERCENTAGE = 240;
  CLIENTMODIFIERTYPE_MODSKILLCUTTINGBEAMPVPBASEDAMAGEPERCENTAGE = 241;
  CLIENTMODIFIERTYPE_MODISOLYTICDAMAGE = 707;
  CLIENTMODIFIERTYPE_MODISOLYTICDEFENSE = 808;
  CLIENTMODIFIERTYPE_MODBDABILITYEFFECT = 220;
  CLIENTMODIFIERTYPE_MODFCCOOLDOWNSPEED = 218;
  CLIENTMODIFIERTYPE_MODJANEWAYFCCOOLDOWNSPEED = 219;
  CLIENTMODIFIERTYPE_MODFORBIDDENTECHUNSLOTCOST = 222;
  CLIENTMODIFIERTYPE_MODFORBIDDENTECHTIERUPCOST = 227;
  CLIENTMODIFIERTYPE_MODFORBIDDENTECHLEVELUPCOST = 228;
  CLIENTMODIFIERTYPE_CHAOSTECHUNSLOTCOST = 72001;
  CLIENTMODIFIERTYPE_CHAOSTECHTIERUPCOST = 72002;
  CLIENTMODIFIERTYPE_CHAOSTECHLEVELUPCOST = 72003;
  CLIENTMODIFIERTYPE_MODBYPASSSHIELDS = 223;
  CLIENTMODIFIERTYPE_MODINSTANTARMADAUNLOCKED = 224;
  CLIENTMODIFIERTYPE_MODHULLREPAIR = 225;
  CLIENTMODIFIERTYPE_MODSIMULTANEOUSARMADA = 233;
  CLIENTMODIFIERTYPE_MODJUMPINGPOINTSCOST = 67002;
  CLIENTMODIFIERTYPE_MODTRELLIUMREWARDS = 67003;
  CLIENTMODIFIERTYPE_MODSKILLCUTTINGBEAMACCUMULATEBEAMS = 251;
  CLIENTMODIFIERTYPE_MODSKILLSELFHEALINGCOST = 68001;
  CLIENTMODIFIERTYPE_MODSKILLSELFHEALINGCOOLDOWN = 68002;
  CLIENTMODIFIERTYPE_MODSKILLSELFHEALINGINCREASE = 68003;
  CLIENTMODIFIERTYPE_MODHOSTILELOOT = 71001;
  CLIENTMODIFIERTYPE_MODCHAINSHOTNUMBERTARGETS = 77005;
  CLIENTMODIFIERTYPE_MODSYNERGYDS9PROMOTIONSHARDCOST = 78001;
  CLIENTMODIFIERTYPE_MODSYNERGYTNGPROMOTIONSHARDCOST = 78002;
  CLIENTMODIFIERTYPE_MODSYNERGYFERENGIPROMOTIONSHARDCOST = 78003;
  CLIENTMODIFIERTYPE_MODSYNERGYUNIMATRIXTWELVEPROMOTIONSHARDCOST = 78004;
  CLIENTMODIFIERTYPE_MODSYNERGYLOWERDECKSPROMOTIONSHARDCOST = 78005;
  CLIENTMODIFIERTYPE_MODSYNERGYPVPSTRIKEPROMOTIONSHARDCOST = 78006;
  CLIENTMODIFIERTYPE_MODSYNERGYSNWPROMOTIONSHARDCOST = 78007;
  CLIENTMODIFIERTYPE_MODSYNERGYVOYAGERPROMOTIONSHARDCOST = 78008;
  CLIENTMODIFIERTYPE_MODSYNERGYENTERPRISEEPROMOTIONSHARDCOST = 78009;
  CLIENTMODIFIERTYPE_MODSYNERGYMIRRORUNIVERSEPROMOTIONSHARDCOST = 79002;
  CLIENTMODIFIERTYPE_MODSYNERGYGALAXYQUESTPROMOTIONSHARDCOST = 79003;
  CLIENTMODIFIERTYPE_MODSYNERGYSYMBIOSISPROMOTIONSHARDCOST = 79004;
  CLIENTMODIFIERTYPE_MODSYNERGYRETALIATIONSQUADSPROMOTIONSHARDCOST = 79005;
  CLIENTMODIFIERTYPE_MODSYNERGYENTERPRISENX01PROMOTIONSHARDCOST = 79006;
  CLIENTMODIFIERTYPE_MODNONE = -1000;
  CLIENTMODIFIERTYPE_SHIPDAMAGEPERROUND = -1;
  CLIENTMODIFIERTYPE_SHIPABSORPTION = -2;
  CLIENTMODIFIERTYPE_SHIPPLATING = -3;
  CLIENTMODIFIERTYPE_FLEETMININGBONUS = -4;
  CLIENTMODIFIERTYPE_SHIPHULLDAMAGE = -5;
  CLIENTMODIFIERTYPE_SHIPSHIELDDAMAGE = -6;
  CLIENTMODIFIERTYPE_FLEETGRADE = -7;
  CLIENTMODIFIERTYPE_FLEETOFFENSERATING = -8;
  CLIENTMODIFIERTYPE_FLEETDEFENSERATING = -9;
  CLIENTMODIFIERTYPE_FLEETHEALTHRATING = -10;
  CLIENTMODIFIERTYPE_FLEETDEFLECTORRATING = -11;
  CLIENTMODIFIERTYPE_FLEETSENSORRATING = -12;
  CLIENTMODIFIERTYPE_FLEETOFFICERRATING = -13;
  CLIENTMODIFIERTYPE_FLEETSTRENGTH = -14;
  CLIENTMODIFIERTYPE_FLEETOFFICERBONUSATTACK = -15;
  CLIENTMODIFIERTYPE_FLEETOFFICERBONUSDEFENSE = -16;
  CLIENTMODIFIERTYPE_FLEETOFFICERBONUSHEALTH = -17;
  CLIENTMODIFIERTYPE_FLEETFORBIDDENTECHRATING = -18;
}

enum ForbiddenTechUpgradeChanceType {
  FORBIDDENTECHUPGRADECHANCETYPE_FORBIDDENTECHCHANCENONE = 0;
  FORBIDDENTECHUPGRADECHANCETYPE_FORBIDDENTECHCHANCEQTRIAL = 1;
  FORBIDDENTECHUPGRADECHANCETYPE_FORBIDDENTECHCHANCESTREAK = 2;
  FORBIDDENTECHUPGRADECHANCETYPE_FORBIDDENTECHCHANCECONSUMABLE = 3;
}

enum ForbiddenTechOutcome {
  FORBIDDENTECHOUTCOME_UNKNOWN = 0;
  FORBIDDENTECHOUTCOME_FAIL = 1;
  FORBIDDENTECHOUTCOME_SUCCESS = 2;
}

enum GameActivityResult {
  GAMEACTIVITYRESULT_UNKNOWNACTIVITYRESULTTYPE = 0;
  GAMEACTIVITYRESULT_WIN = 1;
  GAMEACTIVITYRESULT_LOSE = 2;
  GAMEACTIVITYRESULT_DRAW = 3;
}

enum ServerInstanceType {
  SERVERINSTANCETYPE_GAMEWORLD = 0;
  SERVERINSTANCETYPE_MUGATEST = 1;
  SERVERINSTANCETYPE_ARENA = 1676718364;
}

enum JobType {
  JOBTYPE_SHIPCONSTRUCTION = 0;
  JOBTYPE_COMPONENTCONSTRUCTION = 1;
  JOBTYPE_SHIPREFIT = 2;
  JOBTYPE_RESEARCH = 3;
  JOBTYPE_STARBASECONSTRUCTION = 4;
  JOBTYPE_REPAIRFLEET = 5;
  JOBTYPE_REFINEMENT = 6;
  JOBTYPE_STARBASEREPAIR = 7;
  JOBTYPE_BATTLEREPORTCLEANUP = 8;
  JOBTYPE_STARTMISSION = 9;
  JOBTYPE_ALLIANCECONTRIBUTIONCOOLDOWN = 10;
  JOBTYPE_SHIPTIERUP = 11;
  JOBTYPE_SHIPSCRAP = 12;
  JOBTYPE_AWAYASSIGNMENT = 13;
  JOBTYPE_REPAIRFLEETIPVP = 14;
  JOBTYPE_CLIENTMODULERESOURCEPRODUCTION = 1000;
  JOBTYPE_CLIENTMINERESOURCEPRODUCTION = 1001;
}

enum MissionState {
  MISSIONSTATE_NONE = 0;
  MISSIONSTATE_INPROGRESS = 1;
  MISSIONSTATE_OBJECTIVESCOMPLETE = 2;
  MISSIONSTATE_FAILED = 3;
}

enum ObjectiveState {
  OBJECTIVESTATE_NONE = 0;
  OBJECTIVESTATE_ACTIVE = 1;
  OBJECTIVESTATE_COMPLETE = 2;
  OBJECTIVESTATE_FAILED = 3;
}

enum DialogueSide {
  DIALOGUESIDE_LEFT = 0;
  DIALOGUESIDE_RIGHT = 1;
  DIALOGUESIDE_CENTER = 2;
  DIALOGUESIDE_NONE = 3;
}

enum MissionType {
  MISSIONTYPE_NONE = 0;
  MISSIONTYPE_ACQUIRED = 1;
  MISSIONTYPE_CONTRACTSTATION = 2;
  MISSIONTYPE_CONTRACTSESSION = 3;
  MISSIONTYPE_CHALLENGE = 4;
  MISSIONTYPE_DAILYMILESTONE = 1000;
  MISSIONTYPE_DAILYGOAL = 1001;
}

enum MissionRequirementType {
  MISSIONREQUIREMENTTYPE_SALLOFFICERSCORESTATTOTAL = 0;
  MISSIONREQUIREMENTTYPE_SATLEASTONEOFFICERWITHCORESTAT = 1;
  MISSIONREQUIREMENTTYPE_SSTARBASEMODULELEVEL = 2;
  MISSIONREQUIREMENTTYPE_SPREVIOUSLYCOMPLETEDMISSION = 3;
  MISSIONREQUIREMENTTYPE_SHULLTYPE = 4;
  MISSIONREQUIREMENTTYPE_SHULLGRADE = 5;
  MISSIONREQUIREMENTTYPE_SCOMPONENTVALUE = 6;
  MISSIONREQUIREMENTTYPE_SPLAYERLEVELRANGE = 7;
  MISSIONREQUIREMENTTYPE_SFACTIONSTANDING = 8;
}

enum MissionRewardAnimation {
  MISSIONREWARDANIMATION_FLYBY = 0;
  MISSIONREWARDANIMATION_POPUP = 1;
}

enum PveType {
  PVETYPE_NONE = 0;
  PVETYPE_MARAUDER = 1;
  PVETYPE_NPC = 2;
}

enum ExpectedBattleOutcome {
  EXPECTEDBATTLEOUTCOME_ATTACKERWINS = 0;
  EXPECTEDBATTLEOUTCOME_ATTACKERLOSES = 1;
  EXPECTEDBATTLEOUTCOME_ANY = -1;
}

enum ObjectiveType {
  OBJECTIVETYPE_EVENTCOUNT = 0;
  OBJECTIVETYPE_PROPERTYVALUEWATCH = 1;
  OBJECTIVETYPE_TARGETDESTINATION = 2;
  OBJECTIVETYPE_PLANETDESTINATION = 3;
  OBJECTIVETYPE_STARBASEMODULELEVEL = 4;
  OBJECTIVETYPE_DEFEATNPCINSTANTIATED = 5;
  OBJECTIVETYPE_DEFEATNPCGLOBAL = 6;
  OBJECTIVETYPE_STARTMINING = 7;
  OBJECTIVETYPE_MINERESOURCES = 8;
  OBJECTIVETYPE_RETURNFLEETTOSTATION = 9;
  OBJECTIVETYPE_BUILDFROMBLUEPRINT = 10;
  OBJECTIVETYPE_DUMMYOBJECTIVE = 11;
  OBJECTIVETYPE_DILEMMAOBJECTIVE = 12;
  OBJECTIVETYPE_RECRUITNEWOFFICER = 13;
  OBJECTIVETYPE_JOINALLIANCE = 14;
  OBJECTIVETYPE_ATTACKSTARBASE = 15;
  OBJECTIVETYPE_DONATERESOURCES = 16;
  OBJECTIVETYPE_COMPLETEFACTIONMISSIONS = 17;
  OBJECTIVETYPE_UPGRADESHIP = 18;
  OBJECTIVETYPE_STOCKPILERESOURCES = 19;
  OBJECTIVETYPE_OFFICERLEVELANDRANK = 20;
  OBJECTIVETYPE_DEFEATFACTIONSHIPS = 21;
  OBJECTIVETYPE_ASSIGNOFFICERTODRYDOCK = 22;
  OBJECTIVETYPE_MOVESTARBASE = 23;
  OBJECTIVETYPE_DEFEATCHALLENGENPCINSTANTIATED = 24;
  OBJECTIVETYPE_MINIGAMESTAGE = 25;
  OBJECTIVETYPE_VISITSECTION = 26;
}

enum ObjectiveEventTrigger {
  OBJECTIVEEVENTTRIGGER_COURSECOMPLETE = 0;
  OBJECTIVEEVENTTRIGGER_STARBASEMODULEBUILT = 1;
  OBJECTIVEEVENTTRIGGER_NPCDEFEATED = 2;
  OBJECTIVEEVENTTRIGGER_BATTLEWON = 3;
  OBJECTIVEEVENTTRIGGER_MININGSTARTED = 4;
  OBJECTIVEEVENTTRIGGER_RESOURCESMINED = 5;
  OBJECTIVEEVENTTRIGGER_FLEETRETURNEDTOSTATION = 6;
  OBJECTIVEEVENTTRIGGER_BUILTFROMBLUEPRINT = 7;
  OBJECTIVEEVENTTRIGGER_NEWOFFICERRECRUITED = 8;
  OBJECTIVEEVENTTRIGGER_JOINEDALLIANCE = 9;
  OBJECTIVEEVENTTRIGGER_STARBASEATTACKED = 10;
  OBJECTIVEEVENTTRIGGER_RESOURCESDONATED = 11;
  OBJECTIVEEVENTTRIGGER_MISSIONCOMPLETED = 12;
  OBJECTIVEEVENTTRIGGER_SHIPTIEREDUP = 13;
  OBJECTIVEEVENTTRIGGER_RESOURCESSTOCKPILED = 14;
  OBJECTIVEEVENTTRIGGER_OFFICERUPDATED = 15;
  OBJECTIVEEVENTTRIGGER_OFFICERASSIGNED = 16;
  OBJECTIVEEVENTTRIGGER_STARBASEMOVED = 17;
  OBJECTIVEEVENTTRIGGER_MINIGAMESTAGECOMPLETED = 18;
}

enum BlueprintOutputType {
  BLUEPRINTOUTPUTTYPE_BLUEPRINTOUTPUTHULL = 0;
  BLUEPRINTOUTPUTTYPE_BLUEPRINTOUTPUTWEAPON = 1;
  BLUEPRINTOUTPUTTYPE_BLUEPRINTOUTPUTARMOR = 2;
  BLUEPRINTOUTPUTTYPE_BLUEPRINTOUTPUTSHIELD = 3;
  BLUEPRINTOUTPUTTYPE_BLUEPRINTOUTPUTIMPULSE = 4;
  BLUEPRINTOUTPUTTYPE_BLUEPRINTOUTPUTWARP = 5;
  BLUEPRINTOUTPUTTYPE_BLUEPRINTOUTPUTDEFLECTOR = 6;
  BLUEPRINTOUTPUTTYPE_BLUEPRINTOUTPUTCARGO = 7;
  BLUEPRINTOUTPUTTYPE_BLUEPRINTOUTPUTSENSOR = 8;
  BLUEPRINTOUTPUTTYPE_BLUEPRINTOUTPUTSPECIAL = 9;
  BLUEPRINTOUTPUTTYPE_BLUEPRINTOUTPUTSTATIONWEAPON = 10;
  BLUEPRINTOUTPUTTYPE_BLUEPRINTOUTPUTUNDEFINED = -1;
}

enum NotificationMissionType {
  NOTIFICATIONMISSIONTYPE_OBJECTIVECOMPLETE = 0;
  NOTIFICATIONMISSIONTYPE_MISSIONCOMPLETE = 1;
  NOTIFICATIONMISSIONTYPE_MISSIONSTARTED = 2;
  NOTIFICATIONMISSIONTYPE_OBJECTIVESTARTED = 3;
  NOTIFICATIONMISSIONTYPE_MISSIONSTARTEDONUSERBEHALF = 4;
  NOTIFICATIONMISSIONTYPE_REWARDSREADYFORCOLLECTION = 5;
  NOTIFICATIONMISSIONTYPE_ACTIVEOBJECTIVEPROGRESS = 6;
}

enum NotificationTerritoryType {
  NOTIFICATIONTERRITORYTYPE_JOIN = 0;
  NOTIFICATIONTERRITORYTYPE_ABANDON = 1;
}

enum NotificationUserProfileType {
  NOTIFICATIONUSERPROFILETYPE_LEVELUP = 0;
}

enum NotificationArmadaType {
  NOTIFICATIONARMADATYPE_ARMADACREATE = 0;
  NOTIFICATIONARMADATYPE_ARMADACANCEL = 1;
}

enum NotificationFactionType {
  NOTIFICATIONFACTIONTYPE_STANDING = 0;
  NOTIFICATIONFACTIONTYPE_ATTACKWARNING = 1;
  NOTIFICATIONFACTIONTYPE_DISCOVERY = 2;
}

enum NotificationAllianceType {
  NOTIFICATIONALLIANCETYPE_INVITE = 0;
  NOTIFICATIONALLIANCETYPE_PROMOTION = 1;
  NOTIFICATIONALLIANCETYPE_DEMOTION = 2;
  NOTIFICATIONALLIANCETYPE_KICKED = 3;
  NOTIFICATIONALLIANCETYPE_NEWLEADER = 4;
  NOTIFICATIONALLIANCETYPE_JOBHELPED = 5;
  NOTIFICATIONALLIANCETYPE_MEMBERKICKED = 100;
  NOTIFICATIONALLIANCETYPE_MEMBERPROMOTED = 101;
  NOTIFICATIONALLIANCETYPE_MEMBERDEMOTED = 102;
  NOTIFICATIONALLIANCETYPE_LEADERSHIPTRANSFERRED = 103;
  NOTIFICATIONALLIANCETYPE_JOBHELPREQUEST = 104;
  NOTIFICATIONALLIANCETYPE_CONTRIBUTIONMADE = 105;
}

enum NotificationIncomingAttackTargetType {
  NOTIFICATIONINCOMINGATTACKTARGETTYPE_NONE = 0;
  NOTIFICATIONINCOMINGATTACKTARGETTYPE_FLEET = 1;
  NOTIFICATIONINCOMINGATTACKTARGETTYPE_DOCKINGPOINT = 2;
  NOTIFICATIONINCOMINGATTACKTARGETTYPE_STATION = 3;
}

enum FleetInterceptInterruptionCause {
  FLEETINTERCEPTINTERRUPTIONCAUSE_FLEETINTERCEPTINTERRUPTIONTARGETCHANGEDCOURSE = 0;
  FLEETINTERCEPTINTERRUPTIONCAUSE_FLEETINTERCEPTINTERRUPTIONTARGETWARPEDOUT = 1;
  FLEETINTERCEPTINTERRUPTIONCAUSE_FLEETINTERCEPTINTERRUPTIONTARGETINBATTLE = 2;
  FLEETINTERCEPTINTERRUPTIONCAUSE_FLEETINTERCEPTINTERRUPTIONTARGETDESPAWNED = 3;
}

enum NotificationCourseType {
  NOTIFICATIONCOURSETYPE_CANCELRESOURCE = 0;
  NOTIFICATIONCOURSETYPE_CANCELCOURSEBATTLE = 1;
  NOTIFICATIONCOURSETYPE_CANCELVALIDATIONERROR = 2;
}

enum NotificationShipAbilityType {
  NOTIFICATIONSHIPABILITYTYPE_NOTIFICATIONSHIPABILITYSHIPSUPPORTED = 0;
  NOTIFICATIONSHIPABILITYTYPE_NOTIFICATIONSHIPABILITYSHIPDEBUFFED = 1;
}

enum NotificationProducerType {
  NOTIFICATIONPRODUCERTYPE_NONEXISTENT = 0;
  NOTIFICATIONPRODUCERTYPE_MISSION = 2;
  NOTIFICATIONPRODUCERTYPE_USERPROFILE = 3;
  NOTIFICATIONPRODUCERTYPE_PLATFORMCHEST = 4;
  NOTIFICATIONPRODUCERTYPE_FACTION = 5;
  NOTIFICATIONPRODUCERTYPE_ALLIANCE = 6;
  NOTIFICATIONPRODUCERTYPE_INCOMINGFLEET = 7;
  NOTIFICATIONPRODUCERTYPE_ALLIANCECHEST = 8;
  NOTIFICATIONPRODUCERTYPE_CARGOCOLLECT = 9;
  NOTIFICATIONPRODUCERTYPE_TARGETLOST = 10;
  NOTIFICATIONPRODUCERTYPE_STARBASEMODULEREWARD = 11;
  NOTIFICATIONPRODUCERTYPE_ARMADA = 12;
  NOTIFICATIONPRODUCERTYPE_COURSE = 13;
  NOTIFICATIONPRODUCERTYPE_ALLIANCEDIPLOMACYCHANGED = 14;
  NOTIFICATIONPRODUCERTYPE_TERRITORY = 15;
  NOTIFICATIONPRODUCERTYPE_SHIPABILITY = 16;
}

enum InventoryId {
  INVENTORYID_COMPONENTS = 0;
  INVENTORYID_BLUEPRINTS = 1;
  INVENTORYID_CHESTS = 2;
  INVENTORYID_RESOURCES = 3;
  INVENTORYID_BATTLECONSUMABLES = 4;
  INVENTORYID_MISSIONS = 5;
  INVENTORYID_GALAXYTRANSITIONS = 7;
  INVENTORYID_CONSUMABLES = 8;
  INVENTORYID_ALLIANCE = 9;
  INVENTORYID_OFFICERSHARD = 11;
  INVENTORYID_COSMETICS = 12;
  INVENTORYID_WORKERS = 13;
  INVENTORYID_FORBIDDENTECHSHARD = 14;
  INVENTORYID_OFFICERS = 1000;
  INVENTORYID_STACKS = 1001;
  INVENTORYID_COMMANDERS = 1002;
  INVENTORYID_FORBIDDENTECH = 1003;
  INVENTORYID_UNDEFINED = -1;
}

enum InventoryItemType {
  INVENTORYITEMTYPE_INVENTORYCOMPONENT = 0;
  INVENTORYITEMTYPE_INVENTORYBLUEPRINT = 1;
  INVENTORYITEMTYPE_INVENTORYCHEST = 2;
  INVENTORYITEMTYPE_INVENTORYRESOURCE = 3;
  INVENTORYITEMTYPE_INVENTORYCONSUMABLEBATTLE = 4;
  INVENTORYITEMTYPE_INVENTORYMISSIONACCESS = 5;
  INVENTORYITEMTYPE_INVENTORYCONNECTIONUNLOCK = 6;
  INVENTORYITEMTYPE_INVENTORYGALAXYTRANSITION = 7;
  INVENTORYITEMTYPE_INVENTORYCONSUMABLE = 8;
  INVENTORYITEMTYPE_INVENTORYOFFICER = 9;
  INVENTORYITEMTYPE_INVENTORYSHIP = 10;
  INVENTORYITEMTYPE_INVENTORYOFFICERSHARD = 11;
  INVENTORYITEMTYPE_INVENTORYCOSMETICS = 12;
  INVENTORYITEMTYPE_INVENTORYWORKER = 13;
  INVENTORYITEMTYPE_INVENTORYFORBIDDENTECHSHARD = 14;
  INVENTORYITEMTYPE_INVENTORYSTACK = 100;
  INVENTORYITEMTYPE_INVENTORYSPEEDUP = 101;
  INVENTORYITEMTYPE_INVENTORYRESOURCEBATCH = 102;
  INVENTORYITEMTYPE_INVENTORYSHIELD = 103;
  INVENTORYITEMTYPE_INVENTORYFORBIDDENTECH = 104;
  INVENTORYITEMTYPE_INVENTORYUNDEFINED = -1;
}

enum ChestSourceType {
  CHESTSOURCETYPE_NOTPROVIDED = 0;
  CHESTSOURCETYPE_ALLIANCEGIFT = 1;
  CHESTSOURCETYPE_DROPPVE = 2;
  CHESTSOURCETYPE_DROPPVP = 3;
  CHESTSOURCETYPE_DROPSCRAP = 4;
}

enum SlotType {
  SLOTTYPE_CONSUMABLE = 0;
  SLOTTYPE_WORKER = 1;
  SLOTTYPE_OFFICERPRESET = 2;
  SLOTTYPE_FLEETCOMMANDER = 3;
  SLOTTYPE_SELECTABLESKILL = 4;
  SLOTTYPE_CHALLENGELADDER = 5;
  SLOTTYPE_FORBIDDENTECH = 6;
}

enum BattleUnitState {
  BATTLEUNITSTATE_INVALID = 0;
  BATTLEUNITSTATE_NONE = 1;
  BATTLEUNITSTATE_ONFIRE = 2;
  BATTLEUNITSTATE_BREACHED = 4;
  BATTLEUNITSTATE_HIGHMORALE = 8;
  BATTLEUNITSTATE_LOWMORALE = 16;
  BATTLEUNITSTATE_TAUNTING = 32;
  BATTLEUNITSTATE_ASSIMILATED = 64;
}

enum BuffOperation {
  BUFFOPERATION_NONE = 0;
  BUFFOPERATION_ADD = 1;
  BUFFOPERATION_SUB = 2;
  BUFFOPERATION_MULTIPLYADD = 3;
  BUFFOPERATION_MULTIPLYSUB = 4;
  BUFFOPERATION_MULTIPLYBASEADD = 5;
  BUFFOPERATION_MULTIPLYBASESUB = 6;
  BUFFOPERATION_SCALARADD = 7;
  BUFFOPERATION_SCALARSUB = 8;
}

enum BuffRankedValueType {
  BUFFRANKEDVALUETYPE_VALUE = 0;
  BUFFRANKEDVALUETYPE_CHANCE = 1;
}

enum ComponentType {
  COMPONENTTYPE_ARMOR = 0;
  COMPONENTTYPE_CARGO = 1;
  COMPONENTTYPE_DEFLECTOR = 2;
  COMPONENTTYPE_IMPULSE = 3;
  COMPONENTTYPE_SENSOR = 4;
  COMPONENTTYPE_SHIELD = 5;
  COMPONENTTYPE_SPECIAL = 6;
  COMPONENTTYPE_WARP = 7;
  COMPONENTTYPE_WEAPON = 8;
}

enum ComponentSubType {
  COMPONENTSUBTYPE_GENERALNONE = 0;
  COMPONENTSUBTYPE_WEAPONENERGY = 1;
  COMPONENTSUBTYPE_WEAPONKINETIC = 2;
  COMPONENTSUBTYPE_WEAPONANY = 3;
  COMPONENTSUBTYPE_SPECIALMINING = 5;
}

enum ConsumableType {
  CONSUMABLETYPE_BUFF = 0;
  CONSUMABLETYPE_UNLOCK = 1;
  CONSUMABLETYPE_TREASURY = 2;
}

enum ShowInInventoryRule {
  SHOWININVENTORYRULE_NEVER = 0;
  SHOWININVENTORYRULE_HIDDEN = 1;
  SHOWININVENTORYRULE_ALWAYS = 2;
  SHOWININVENTORYRULE_OWNED = 3;
}

enum CosmeticType {
  COSMETICTYPE_UNKNOWN = 0;
  COSMETICTYPE_AVATAR = 1;
  COSMETICTYPE_FRAME = 2;
  COSMETICTYPE_SHIPSKIN = 3;
  COSMETICTYPE_HAILINGFREQUENCY = 4;
}

enum GameActivityRuleType {
  GAMEACTIVITYRULETYPE_UNKNOWNACTIVITYRULETYPE = 0;
  GAMEACTIVITYRULETYPE_GOAL = 219558006;
  GAMEACTIVITYRULETYPE_ACTIVESHIP = 286444832;
  GAMEACTIVITYRULETYPE_RELOCATE = 993286725;
  GAMEACTIVITYRULETYPE_REPAIR = 1631870816;
  GAMEACTIVITYRULETYPE_RELOCATEENTRY = 605766716;
  GAMEACTIVITYRULETYPE_RELOCATEEXIT = 2018890572;
}

enum ActionBehaviours {
  ACTIONBEHAVIOURS_ACTIONBEHAVIOURNONE = 0;
  ACTIONBEHAVIOURS_ACTIONBEHAVIOURDEFAULT = 1;
  ACTIONBEHAVIOURS_ACTIONBEHAVIOURINSTANT = 2;
  ACTIONBEHAVIOURS_PEEDUP = 3;
  ACTIONBEHAVIOURS_ACTIONBEHAVIOURCOLLECT = 4;
  ACTIONBEHAVIOURS_ACTIONBEHAVIOURASKHELP = 5;
  ACTIONBEHAVIOURS_ACTIONBEHAVIOURREQUESTCONFIRMATION = 50;
}

enum ActivatedAbilityType {
  ACTIVATEDABILITYTYPE_INVALID = 0;
  ACTIVATEDABILITYTYPE_INSTANTWARP = 1;
  ACTIVATEDABILITYTYPE_TOWING = 2;
  ACTIVATEDABILITYTYPE_CLOAKING = 3;
  ACTIVATEDABILITYTYPE_SUPPORTSHIP = 4;
  ACTIVATEDABILITYTYPE_DEBUFFSHIP = 5;
  ACTIVATEDABILITYTYPE_WARSHIELD = 6;
  ACTIVATEDABILITYTYPE_ARMADASUPPORT = 7;
  ACTIVATEDABILITYTYPE_WEAPONDAMAGE = 8;
  ACTIVATEDABILITYTYPE_WEAPONPENETRATION = 9;
  ACTIVATEDABILITYTYPE_WEAPONSHOTS = 10;
  ACTIVATEDABILITYTYPE_CRITICALDAMAGE = 11;
  ACTIVATEDABILITYTYPE_SYSTEMWIDEBUFF = 12;
  ACTIVATEDABILITYTYPE_SYSTEMWIDESUPREMEBUFF = 13;
  ACTIVATEDABILITYTYPE_REVEAL = 14;
  ACTIVATEDABILITYTYPE_DEEPSCAN = 15;
  ACTIVATEDABILITYTYPE_ISOLYTICDAMAGE = 16;
  ACTIVATEDABILITYTYPE_ISOLYTICMITIGATION = 17;
  ACTIVATEDABILITYTYPE_CUTTINGBEAM = 18;
  ACTIVATEDABILITYTYPE_ASSIMILATION = 19;
  ACTIVATEDABILITYTYPE_SYSTEMREVEAL = 20;
  ACTIVATEDABILITYTYPE_WORMHOLE = 21;
  ACTIVATEDABILITYTYPE_CUTTINGBEAMIMMUNITY = 22;
  ACTIVATEDABILITYTYPE_SELFHEALING = 24;
  ACTIVATEDABILITYTYPE_INDESTRUCTIBILITY = 25;
  ACTIVATEDABILITYTYPE_TAUNT = 71001;
  ACTIVATEDABILITYTYPE_STATICABILITY = 75001;
  ACTIVATEDABILITYTYPE_CHARGEDABILITY = 75002;
  ACTIVATEDABILITYTYPE_CHAINSHOT = 77001;
  ACTIVATEDABILITYTYPE_CHAINSHOTIMMUNITY = 78001;
}

enum BuffSchemaType {
  BUFFSCHEMATYPE_NONE = 0;
  BUFFSCHEMATYPE_BATTLEBUFFSCHEMA = 1;
  BUFFSCHEMATYPE_FLEETDEPLOYMENTSCHEMA = 2;
}

enum GameActivityGoalType {
  GAMEACTIVITYGOALTYPE_UNKNOWNACTIVITYGOALTYPE = 0;
  GAMEACTIVITYGOALTYPE_GOALSCORE = 1437210281;
}

enum GameActivityInflectionType {
  GAMEACTIVITYINFLECTIONTYPE_UNKNOWNINFLECTIONTYPE = 0;
  GAMEACTIVITYINFLECTIONTYPE_DURATION = 288462572;
  GAMEACTIVITYINFLECTIONTYPE_SCORE = 1437210281;
}

enum GameActivityType {
  GAMEACTIVITYTYPE_UNKNOWNACTIVITYTYPE = 0;
  GAMEACTIVITYTYPE_ARENA = 1676718364;
}

enum GameActivityParticipantsType {
  GAMEACTIVITYPARTICIPANTSTYPE_UNKNOWNACTIVITYPARTICIPANTSTYPE = 0;
  GAMEACTIVITYPARTICIPANTSTYPE_ALLIANCEPARTY = 1407625899;
}

enum ComponentSlotAction {
  COMPONENTSLOTACTION_ABSORPTION = 0;
  COMPONENTSLOTACTION_ACCURACY = 1;
  COMPONENTSLOTACTION_ACTIVESCAN = 2;
  COMPONENTSLOTACTION_CARGOMAX = 3;
  COMPONENTSLOTACTION_DODGE = 4;
  COMPONENTSLOTACTION_ENFORCE = 5;
  COMPONENTSLOTACTION_MAXDAMAGE = 6;
  COMPONENTSLOTACTION_MINDAMAGE = 7;
  COMPONENTSLOTACTION_MODULATION = 8;
  COMPONENTSLOTACTION_PENETRATION = 9;
  COMPONENTSLOTACTION_PLATING = 10;
  COMPONENTSLOTACTION_SHP = 11;
  COMPONENTSLOTACTION_WARPDISTANCE = 12;
}

enum Faction {
  FACTION_UNDEFINED = 0;
  FACTION_FEDERATION = 1;
  FACTION_KLINGON = 2;
  FACTION_ROMULAN = 3;
  FACTION_NONE = -1;
}

enum OfficerType {
  OFFICERTYPE_UNKNOWN = 0;
  OFFICERTYPE_REGULAROFFICER = 1;
  OFFICERTYPE_COMMANDER = 2;
}

enum RequirementType {
  REQUIREMENTTYPE_NONE = 0;
  REQUIREMENTTYPE_MODULELEVEL = 1;
  REQUIREMENTTYPE_RESEARCHLEVEL = 2;
  REQUIREMENTTYPE_FACTIONRANK = 3;
  REQUIREMENTTYPE_ALLIANCELEVEL = 4;
  REQUIREMENTTYPE_OFFICERRANK = 5;
  REQUIREMENTTYPE_OFFICERLEVEL = 6;
  REQUIREMENTTYPE_TOTALOFFICERLEVEL = 7;
  REQUIREMENTTYPE_SHIPTIER = 8;
  REQUIREMENTTYPE_NUMOFFICERATGIVENTIERS = 9;
}

enum ResourceConversionType {
  RESOURCECONVERSIONTYPE_RESOURCES = 0;
  RESOURCECONVERSIONTYPE_TIME = 1;
  RESOURCECONVERSIONTYPE_SHIPXP = 2;
}

enum ResourceSubtype {
  RESOURCESUBTYPE_NONE = 0;
  RESOURCESUBTYPE_SOFT = 1;
  RESOURCESUBTYPE_HARD = 2;
  RESOURCESUBTYPE_RAWMATERIAL = 3;
  RESOURCESUBTYPE_REFINEDMATERIAL = 4;
  RESOURCESUBTYPE_TOKEN = 5;
  RESOURCESUBTYPE_INTEL = 6;
  RESOURCESUBTYPE_FACTIONPOINT = 7;
  RESOURCESUBTYPE_SPEEDUPTOKEN = 8;
  RESOURCESUBTYPE_RESOURCEBATCH = 9;
  RESOURCESUBTYPE_DAILY = 10;
  RESOURCESUBTYPE_MATERIAL = 11;
  RESOURCESUBTYPE_PEACESHIELDTOKEN = 12;
  RESOURCESUBTYPE_PEACESHIELD = 13;
  RESOURCESUBTYPE_SCRAPPEDMATERIAL = 14;
  RESOURCESUBTYPE_TERRITORYCAPTURE = 15;
  RESOURCESUBTYPE_COSMETICSSHARD = 16;
  RESOURCESUBTYPE_RATING = 17;
}

enum ConsumableResourceLevel {
  CONSUMABLERESOURCELEVEL_NONE = 0;
  CONSUMABLERESOURCELEVEL_BRONZE = 1;
  CONSUMABLERESOURCELEVEL_SILVER = 2;
  CONSUMABLERESOURCELEVEL_GOLD = 3;
  CONSUMABLERESOURCELEVEL_PLATINUM = 4;
}

enum ResourceOwnerType {
  RESOURCEOWNERTYPE_PLAYER = 0;
  RESOURCEOWNERTYPE_ALLIANCE = 1;
}

enum PeaceShieldType {
  PEACESHIELDTYPE_NONE = 0;
  PEACESHIELDTYPE_STATION = 1;
  PEACESHIELDTYPE_SHIP = 2;
  PEACESHIELDTYPE_MINE = 3;
}

message UserTemplateHeader {
  string templateName = 1;
  string userId = 2;
  int32 level = 3;
}

message UserTemplateHeadersResponse {
  repeated UserTemplateHeader userTemplateHeaders = 1;
}

message CheckAccountResponse {
  AccountState accountState = 1;
  int32 gameworldId = 2;
  ServerInstanceInfo currentInstance = 3;
}

message AllianceProfile {
  int64 id = 1;
  string name = 2;
  string tag = 3;
  int32 emblem = 4;
  bool public = 5;
  int32 level = 6;
  AllianceMetadata metadata = 7;
  int32 gameworldId = 8;
  int32 league = 9;
}

message AllianceMembersStarbasesLocations {
  map<string, NodeAddress> allianceMembersStarbasesLocations_ = 1;
}

message AllianceGameProperty {
  string propertyName = 1;
  repeated string valueList = 2;
}

message GetAllianceProfilesResponse {
  repeated AllianceProfile allianceProfiles = 1;
  repeated int64 missingAlliances = 2;
}

message AllianceMetadata {
  int32 memberCount = 1;
  uint64 militaryMight = 2;
}

message AllianceInvites {
  repeated AllianceInvite allianceInvites_ = 1;
}

message AllianceInvite {
  int64 id = 1;
}

message AllianceMembersStarbasesLocationsResponse {
  AllianceMembersStarbasesLocations allianceMembersStarbasesLocations = 1;
}

message AllianceInviteResponse {
  repeated string acceptedList = 1;
  repeated string rejectedList = 2;
}

message AllianceCanInviteResponse {
  repeated string acceptedList = 1;
  repeated string rejectedList = 2;
}

message AllianceSetDiplomacyResponse {
  AllianceDiplomacyStatus status = 1;
}

message AllianceGetBankResourcesResponse {
  repeated InventoryItem items = 1;
}

message AllianceGamePropertiesResponse {
  repeated AllianceGameProperty properties = 1;
}

message ArmadaAttack {
  int64 id = 1;
  string ownerId = 2;
  google.protobuf.Timestamp createdAt = 3;
  google.protobuf.Timestamp attacksAt = 4;
  Point location = 5;
  ArmadaTargetInfo target = 6;
  NodeAddress nodeAddress = 7;
  repeated int64 memberFleetIds = 8;
  ArmadaAttackState state = 9;
  int32 fleetCapacity = 10;
  map<string, int64> guaranteedSlots = 11;
  int32 serverInstanceId = 12;
  int64 multiTargetArmadaAttackId = 13;
}

message ArmadaTargetInfo {
  ArmadaTargetType type = 1;
  string userId = 2;
  int64 fleetId = 3;
  FleetArmadaCategory category = 4;
  EntityRef targetRef = 5;
}

message ArmadaAttackEnRouteFleetInfo {
  int64 fleetId = 1;
  int64 hullId = 2;
  int64 strength = 3;
}

message ArmadaAttackListResponse {
  repeated ArmadaAttack armadaAttackList = 1;
}

message ArmadaAttackResponse {
  ArmadaAttack armadaAttack = 1;
}

message ArmadaEnRouteFleetInfoPerSystem {
  repeated ArmadaAttackEnRouteFleetInfo armadaFleetInfo = 1;
}

message ArmadaAttackSpec {
  ArmadaTargetType targetType = 1;
  int64 resourceId = 2;
  repeated int32 costs = 3;
  Rarity rarity = 4;
}

message ArmadaPveSpec {
  int64 resourceId = 1;
  int64 quantity = 2;
  int64 marauderGroupId = 3;
  int32 attackDuration = 4;
  int32 instantAttackDuration = 5;
  int64 instantQuantity = 6;
  int64 instantResourceId = 7;
  int32 roundLimit = 8;
}

message ArmadaPvpSpec {
  int64 resourceId = 1;
  int64 quantity = 2;
  ArmadaTargetType targetType = 3;
  int32 attackDuration = 4;
}

message AwayAssignmentInstance {
  int64 id = 1;
  IdRefs idRefs = 2;
  Rarity rarity = 3;
  OfficerCoreStatType keyStat = 4;
  int64 subtype = 5;
  int64 awayAssignmentTemplateId = 6;
  int64 requiredOfficerSpecId = 7;
  Resource cost = 8;
  AwayAssignmentState state = 9;
  map<int64, int64> officerIds = 10;
  AwayAssignmentParameters parameters = 11;
  string jobUuid = 12;
  AwayAssignmentOutcome outcome = 13;
  int32 maxAssignableOfficersCount = 14;
  bool prepareInstance = 15;
  repeated TraitWithMaxLevelSpec officerTraits = 16;
  int32 maxCriticalSuccessChance = 17;
  int32 priority = 18;
  int32 generation = 19;
  int32 frameType = 20;
  float attackWeight = 21;
  float defenseWeight = 22;
  float healthWeight = 23;
}

message AwayAssignmentParameters {
  int64 id = 1;
  int32 successChance = 2;
  int32 criticalSuccessChance = 3;
  float rewardMultiplier = 4;
  int64 duration = 5;
  int32 totalOfficersAttack = 6;
  int32 totalOfficersDefense = 7;
  int32 totalOfficersHealth = 8;
  repeated InventoryItem rewards = 9;
  repeated InventoryItem criticalRewards = 10;
  map<int64, int32> criticalTraitScores = 11;
}

message AwayAssignmentUserListResponse {
  repeated AwayAssignmentInstance instances = 1;
}

message ActiveBuff {
  int64 buffId = 1;
  int64 activatorId = 2;
  google.protobuf.Timestamp activationTime = 3;
  google.protobuf.Timestamp expiryTime = 4;
  repeated int64 ranks = 5;
}

message Buff {
  int64 buffId = 1;
  string schemaId = 2;
  int32 target = 4;
  int32 trigger = 5;
  BuffSource sourceType = 6;
  int64 sourceId = 7;
  int64 cooldown = 8;
}

message GlobalActiveBuff {
  int64 buffId = 1;
  ActiveBuff activeBuff = 2;
  int32 level = 3;
}

message GlobalActiveBuffsResponse {
  repeated GlobalActiveBuff globalActiveBuffs = 1;
}

message Ceasefire {
  google.protobuf.Timestamp startTime = 1;
  google.protobuf.Timestamp endTime = 2;
}

message ChallengeLadderMilestone {
  int64 threshold = 1;
  int64 bundleRefId = 2;
}

message ChallengeLadderSpec {
  int64 id = 1;
  IdRefs idRefs = 2;
  repeated Resource costs = 3;
  int64 ratingCap = 4;
  double ratingDifficulty = 5;
  double ratingMaxDelta = 6;
  double ratingMinDelta = 7;
  int64 ratingStart = 8;
  repeated ChallengeLadderMilestone rewardMilestones = 10;
  int32 sortOrder = 11;
}

message BundleRewardsSpec {
  int64 bundleRefId = 1;
  repeated InventoryItem rewards = 2;
}

message AchievementsConfig {
  int32 maxLevel = 1;
}

message ActivatedShipAbilityConfig {
  TargetableConfig targetable = 1;
  int32 abilityType = 2;
}

message TargetableConfig {
  repeated int32 deployedFleetTypes = 1;
  bool armada = 2;
}

message AllianceConfig {
  int32 matchmakingDataUpdateFlagLimit = 1;
  int32 matchmakingDataUpdateTimeoutSeconds = 2;
  int32 batchInviteLimit = 3;
  int32 nameMinimumLength = 4;
  int32 maxAllianceMembersSize = 5;
  int32 emblemSizeLimit = 6;
  int32 notificationsLimit = 7;
  int32 joinLeaveCooldownSeconds = 8;
  int32 tagMinimumLength = 9;
  int32 nameSizeLimit = 10;
  int32 pendingInviteLimit = 11;
  int32 announcementSizeLimit = 12;
  int32 notificationTimeoutSeconds = 13;
  int32 tagSizeLimit = 14;
  int32 sloganSizeLimit = 15;
  map<int64, int64> creationCost = 16;
  int32 creationMinimumLevel = 17;
  int32 maximumDiplomaticRelationshipSlots = 18;
  int64 allianceFactionId = 19;
}

message AllianceStarbaseConfig {
  int64 relocationResourceId = 1;
  int64 relocationCost = 2;
  int32 relocationCooldownSeconds = 3;
  repeated int64 starbaseResourceIds = 4;
  IdRefs systemIdRefs = 5;
  int64 originSystemId = 6;
}

message ArmadasConfig {
  int32 armadaBuildingModuleId = 1;
  int32 armadaAttackRadiusSize = 2;
  int32 armadaAttackImmunityShieldTimer = 4;
  map<int32, int32> armadaAttackLimitPerTarget = 5;
  int32 armadaAttackWaitTimer = 6;
}

message BattleConfig {
  int32 stationCombatDelaySeconds = 1;
  int32 pvpCombatDelaySeconds = 2;
  int32 resultLimit = 3;
  int32 engageRangeLimit = 4;
  int32 combatLengthSeconds = 5;
  repeated int64 starbaseStealableResources = 6;
  map<int64, int32> stealableResourcesWeights = 7;
  int32 pveCombatDelaySeconds = 8;
  int32 cleanupWaitTime = 9;
  float starbaseProducerProtection = 10;
  float starbaseStealableModifier = 11;
  map<string, string> equations = 12;
  map<string, float> static = 13;
}

message ChallengeConfig {
  int32 minimumLevelRequired = 1;
}

message ClientShipStatLookupSpec {
  repeated ShipStats shipStats = 1;
}

message ShipStats {
  int32 level = 1;
  int32 battleshipAccuracy = 2;
  int32 battleshipDodge = 3;
  int32 battleshipModulation = 4;
  int32 battleshipPenetration = 5;
  int32 battleshipPlating = 6;
  int32 battleshipAbsorption = 7;
  int32 destroyerAbsorption = 8;
  int32 destroyerAccuracy = 9;
  int32 destroyerDodge = 10;
  int32 destroyerModulation = 11;
  int32 destroyerPenetration = 12;
  int32 destroyerPlating = 13;
  int32 explorerAbsorption = 14;
  int32 explorerAccuracy = 15;
  int32 explorerDodge = 16;
  int32 explorerModulation = 17;
  int32 explorerPenetration = 18;
  int32 explorerPlating = 19;
  int32 surveyAbsorption = 20;
  int32 surveyAccuracy = 21;
  int32 surveyDodge = 22;
  int32 surveyModulation = 23;
  int32 surveyPenetration = 24;
  int32 surveyPlating = 25;
  int32 defenseAbsorption = 26;
  int32 defenseAccuracy = 27;
  int32 defenseDodge = 28;
  int32 defenseModulation = 29;
  int32 defensePenetration = 30;
  int32 defensePlating = 31;
}

message ConsistencyConfig {
  int32 periodicCheckSeconds = 1;
  int32 courseTimeoutSeconds = 2;
  int32 battleTimeoutSeconds = 3;
}

message DialogueConfig {
message Buttons {
  int32 collect = 1;
  int32 none = 2;
  int32 visit = 3;
}

message DialogueSides {
  int32 right = 1;
  int32 center = 2;
  int32 left = 3;
}

  Buttons buttons = 1;
  DialogueSides dialogSides = 2;
}

message PlanetSlotsConfig {
message Slot {
  float x = 1;
  float y = 2;
}

  repeated Slot slots = 1;
}

message ServerTransferConfig {
  repeated ServerTransferCost costs = 1;
}

message ServerTransferCost {
  int64 resourceId = 1;
  int64 resourceAmt = 2;
  int32 maxLevel = 3;
}

message FactionConfig {
  repeated int64 factionIdToIndexMapping = 1;
  int32 interceptTimeSeconds = 2;
}

message FleetConfig {
  int32 quickRecallTimer = 1;
  int32 quickRecallCooldownSeconds = 2;
  int32 chargeWarpTime = 3;
  int32 baselineRepairTime = 4;
  float repairCostPercentage = 5;
  int32 maxFleetShips = 6;
  int32 courseChangeCoolDownSeconds = 7;
  int32 maxCrewSize = 8;
  int32 bridgeCrewSize = 9;
  int64 xpResourceId = 10;
  int32 hailingFrequenciesCooldownSeconds = 11;
}

message FleetIconConfig {
message Icon {
  int32 grade = 1;
  int32 massMax = 2;
  int32 massMin = 3;
}

  repeated Icon icons = 1;
}

message FleetRepairCosts {
  int64 fleetId = 1;
  int64 repairTime = 2;
  map<int64, int64> softRepairCost = 3;
  map<int64, int64> hardRepairCost = 4;
  bool isDamaged = 5;
}

message ForbiddenTechConfig {
  int32 minimumLevelRequired = 1;
}

message FtueConfig {
  bool ftueEnabled = 1;
}

message FtueProgressionConfig {
  int32 notStarted = 1;
  int32 complete = 2;
  int32 firstStage = 3;
}

message GalaxyNodeMarauderInfo {
  repeated int64 marauderInfoId = 1;
}

message GalaxyNodeMineSetups {
  repeated int64 miningSetups = 1;
}

message GlobalDamageReductionConfig {
  float damageReductionMin = 1;
  float damageReductionIncrease = 2;
  float damageReductionOffset = 3;
}

message HailingFrequenciesConfig {
  int32 minimumLevelRequired = 1;
  int32 ceiling = 2;
}

message NodeAddress {
  int64 galaxy = 1;
  int64 system = 2;
  int64 planet = 3;
  int32 instance = 4;
}

message Point {
  int32 x = 1;
  int32 y = 2;
}

message MarauderInfo {
  int32 minLevel = 1;
  int32 maxLevel = 2;
  HullType hullType = 3;
}

message MiningSetup {
  int64 resourceId = 1;
}

message NavigationConfig {
  int32 systemRadius = 1;
  int32 systemDeployedFleetsSoftLimit = 2;
  int32 warpEmergeRadius = 3;
  int32 planetRadius = 4;
  int32 globalWarpRangeModifier = 5;
  float globalWarpSpeedModifier = 6;
  float globalImpulseSpeedModifier = 7;
  int32 planetImpulseSpeedModifier = 8;
  int32 systemImpulseSpeedModifier = 9;
  int32 nodeEjectRadius = 10;
  int32 warpPathMaxNodesTraverse = 11;
  int32 warpPathMaxConnectionsTraverseRecall = 12;
}

message NewPlayerConfig {
message FtueFleetPosition {
  int32 x = 1;
  int32 y = 2;
}

  int64 starterOfficer = 1;
  float moduleEffectModifier = 2;
  FtueFleetPosition ftueFleetPosition = 3;
  repeated int64 starterOfficers = 4;
}

message OfficerConfig {
  map<int32, int32> statMaxima = 1;
}

message OptimisedGalaxy {
  repeated int32 factionInfluences = 1;
  repeated GraphNodeConnectionRequirementType unlockReqTypes = 2;
  repeated int32 xCoords = 3;
  repeated int64 nodeIds = 4;
  repeated int64 sourceIds = 5;
  repeated int32 connectionsOffset = 6;
  repeated int32 priorities = 7;
  repeated int32 unlockOffset = 8;
  repeated int32 levels = 9;
  repeated int32 distances = 10;
  repeated int32 yCoords = 11;
  repeated int64 transIds = 12;
  repeated int32 connectionsCount = 13;
  repeated int64 factions = 14;
  repeated int64 unlockReqSources = 15;
  repeated int64 unlockReqQuantities = 21;
  repeated int32 unlockReqCount = 16;
  repeated int64 destIds = 17;
  repeated int64 assetIds = 18;
  repeated GalaxyNodeMineSetups mines = 19;
  repeated bool isDeepSpace = 20;
  repeated int32 superHighwaysIndices = 22;
  repeated GalaxyNodeMarauderInfo marauders = 23;
  repeated bool hazardsEnabled = 27;
  repeated int64 hazardId = 28;
  repeated int32 hazardsLevel = 29;
  repeated bool isWaveDefense = 30;
  repeated int64 waveDefenseChallenge = 31;
  repeated bool isMirrorUniverse = 32;
  repeated bool isGameActivity = 33;
  repeated int64 gameActivity = 34;
}

message PeaceShieldRulesConfig {
  int32 suspendSystemLevel = 1;
}

message PlacementConfig {
  int32 containerLimit = 1;
}

message ResourceConfig {
  int64 officerExchangeCurrencyId = 1;
  int32 harvestCooldown = 2;
  repeated int64 primaryResources = 3;
  int64 hardCurrencyId = 4;
}

message EntityGroup {
enum Type {
  TYPE_USERPROFILES = 0;
  TYPE_HULLSPECS = 1;
  TYPE_RESOURCESPECS = 2;
  TYPE_RESOURCECONVERSIONSPECS = 3;
  TYPE_JOBSPEEDUPRESOURCESPECS = 4;
  TYPE_STARBASESPECS = 5;
  TYPE_OFFICERSPECS = 7;
  TYPE_FACTIONSPECS = 8;
  TYPE_FACTIONBEHAVIOURSPECS = 9;
  TYPE_USERCONSUMABLESPECS = 10;
  TYPE_PLAYERXPSPECS = 11;
  TYPE_COMPONENTSPECS = 12;
  TYPE_OBJECTIVEDEFINITIONS = 13;
  TYPE_ALLIANCERANKSPECS = 14;
  TYPE_ALLIANCELEVELSPECS = 15;
  TYPE_ALLIANCEPERMISSIONSPECS = 16;
  TYPE_OFFICERABILITYBUFFSPECS = 17;
  TYPE_OFFICERCORESTATSPECS = 18;
  TYPE_OFFICERINTELREQUIREMENTSPECS = 19;
  TYPE_OFFICERSYNERGYFACTORSPECS = 20;
  TYPE_BLUEPRINTSPECS = 21;
  TYPE_NAVIGATIONCONFIG = 22;
  TYPE_FLEETCONFIG = 23;
  TYPE_FLEETICONCONFIG = 24;
  TYPE_ALLIANCECONFIG = 25;
  TYPE_CONSISTENCYCONFIG = 26;
  TYPE_FTUECONFIG = 27;
  TYPE_PLACEMENTCONFIG = 28;
  TYPE_DIALOGCONFIG = 29;
  TYPE_FACTIONCONFIG = 30;
  TYPE_RESOURCECONFIG = 31;
  TYPE_FTUEPROGRESSIONCONFIG = 32;
  TYPE_NEWPLAYERCONFIG = 33;
  TYPE_THREATCONFIG = 34;
  TYPE_STATIONSHIELDCONFIG = 35;
  TYPE_PLANETSLOTSCONFIG = 36;
  TYPE_OFFICERCONFIG = 37;
  TYPE_BATTLECONFIG = 38;
  TYPE_STARBASECONFIG = 39;
  TYPE_SHIPXPCONFIG = 40;
  TYPE_OPTIMISEDGALAXY = 41;
  TYPE_JSON = 42;
  TYPE_OFFICERS = 43;
  TYPE_OFFICERCORESTATTHRESHOLDSSPECS = 44;
  TYPE_OFFICERPROMOTIONSPECS = 45;
  TYPE_PLAYERINVENTORIES = 46;
  TYPE_NOTIFICATIONS = 47;
  TYPE_CLIENTSHIPSTATLOOKUPSPECS = 48;
  TYPE_BASESHIPTIERSPECS = 49;
  TYPE_SHIPTIERSPECS = 50;
  TYPE_SHIPBONUSBUFFSPECS = 51;
  TYPE_MITIGATIONCAPSSPECS = 52;
  TYPE_GLOBALDAMAGEREDUCTIONCONFIG = 53;
  TYPE_BUFFTARGETSPECS = 54;
  TYPE_BUFFTRIGGERSPECS = 55;
  TYPE_JOBS = 56;
  TYPE_STARBASEDETAILEDSCAN = 57;
  TYPE_MISSIONSPECS = 58;
  TYPE_AVAILABLEMISSIONS = 59;
  TYPE_NODEMISSIONS = 60;
  TYPE_ACTIVEMISSIONS = 61;
  TYPE_ACTIONSPECS = 62;
  TYPE_ALLIANCEMEMBERSSTARBASESLOCATIONS = 63;
  TYPE_COMPLETEDMISSIONS = 64;
  TYPE_SHIPLEVELUPBONUSBUFFSSPECS = 65;
  TYPE_RESEARCHSPECS = 66;
  TYPE_RESEARCHTREESSTATE = 67;
  TYPE_STARBASEBUFFS = 68;
  TYPE_GLOBALACTIVEBUFFS = 69;
  TYPE_REQUIREMENTS = 70;
  TYPE_ALLIANCEPROFILES = 71;
  TYPE_ALLIANCEINVITES = 72;
  TYPE_ALLIANCELEADERINVITES = 73;
  TYPE_PVPBANDING = 74;
  TYPE_USERTEMPLATES = 75;
  TYPE_ARMADAATTACK = 76;
  TYPE_ARMADAATTACKSPECS = 77;
  TYPE_ARMADAATTACKSYSTEMLIST = 78;
  TYPE_ARMADAATTACKUSERLIST = 79;
  TYPE_ARMADACONFIG = 80;
  TYPE_ARMADAATTACKALLIANCEATTACKINGLIST = 81;
  TYPE_ARMADAATTACKINCOMINGTHREATLIST = 82;
  TYPE_SERVERTRANSFERCONFIG = 83;
  TYPE_MININGSETUPCONFIG = 84;
  TYPE_SCRAPYARDSPECS = 85;
  TYPE_SCRAPYARDJOB = 86;
  TYPE_COSMETICSPECS = 87;
  TYPE_CEASEFIRE = 88;
  TYPE_SETALLIANCEDIPLOMACY = 89;
  TYPE_ARMADAPVESPECS = 90;
  TYPE_TOOLINGLOOTROLL = 91;
  TYPE_TOOLINGRESPAWNTIMES = 92;
  TYPE_ARMADAENROUTEINFOLIST = 93;
  TYPE_FLEETREPAIRCOSTS = 94;
  TYPE_PRESTIGEDATA = 95;
  TYPE_TERRITORYSTATICDATA = 96;
  TYPE_TERRITORYALLOWNERS = 97;
  TYPE_TERRITORYOWNER = 98;
  TYPE_TERRITORYALLTAKEOVERS = 99;
  TYPE_TERRITORYTAKEOVER = 100;
  TYPE_TERRITORYTAKEOVERCANJOIN = 101;
  TYPE_ALLIANCEGETBANKRESOURCES = 102;
  TYPE_TERRITORYACTIVESERVICES = 103;
  TYPE_TERRITORYSERVICESLOTS = 104;
  TYPE_TERRITORYALLIANCESLOTS = 105;
  TYPE_TERRITORYCANACTIVATESERVICE = 106;
  TYPE_WORKERSPECS = 107;
  TYPE_BATCHATTRIBUTERESPONSE = 108;
  TYPE_BUFFSGETATTRIBUTE = 109;
  TYPE_AWAYASSIGNMENTSSTATIC = 110;
  TYPE_AWAYASSIGNMENTSLIST = 111;
  TYPE_AWAYASSIGNMENTSPARAMETER = 112;
  TYPE_AWAYASSIGNMENTSINSTANCE = 113;
  TYPE_CONSUMABLESPECS = 114;
  TYPE_SLOTSPECS = 115;
  TYPE_CONSUMABLEBUFFS = 116;
  TYPE_ENTITYSLOTS = 117;
  TYPE_TRAITSSPECS = 118;
  TYPE_OFFICERTRAITSSPECS = 119;
  TYPE_ACTIVEOFFICERTRAITS = 120;
  TYPE_ENTITYSLOTSDATA = 121;
  TYPE_LOYALTYSPECS = 122;
  TYPE_PEACESHIELDRULESSPECS = 123;
  TYPE_MARAUDERINFO = 124;
  TYPE_ALLIANCESTARBASECONFIG = 125;
  TYPE_STARBASESERVICE = 126;
  TYPE_GAMEWORLD = 127;
  TYPE_ACTIVATEDABILITYSPECS = 128;
  TYPE_ACHIEVEMENTSCONFIG = 129;
  TYPE_ARMADAPVPSPECS = 130;
  TYPE_OFFICERPROGRESSREWARDSPECS = 131;
  TYPE_COMMANDERSKILLSPECS = 132;
  TYPE_COMMANDERINTELREQUIREMENTSPECS = 133;
  TYPE_HAILINGFREQCONFIG = 134;
  TYPE_OFFICERLEVELREWARDSSPECS = 135;
  TYPE_RESOURCEGROUPSSPEC = 136;
  TYPE_CHALLENGELADDERSPECS = 137;
  TYPE_BUNDLEREWARDSSPECS = 138;
  TYPE_FORBIDDENTECHSPECS = 139;
  TYPE_FORBIDDENTECHS = 140;
  TYPE_FORBIDDENTECHBUFFS = 141;
  TYPE_FORBIDDENTECHREMOVALCOSTS = 142;
  TYPE_FORBIDDENTECHINSTANCE = 143;
  TYPE_FORBIDDENTECHCHANCES = 144;
  TYPE_FORBIDDENTECHCONFIG = 145;
  TYPE_CHALLENGECONFIG = 146;
  TYPE_FORBIDDENTECHUPGRADECOSTS = 147;
  TYPE_HAZARDSPECS = 148;
  TYPE_ACTIVATEDSHIPABILITIESCONFIGS = 149;
  TYPE_WAVEDEFENSESTATICDATA = 150;
  TYPE_WAVEDEFENSEPARTYDATA = 151;
  TYPE_WAVEDEFENSESYNCDATA = 152;
  TYPE_WAVEDEFENSECHALLENGEDATA = 153;
  TYPE_USERPROFILESETTINGS = 154;
  TYPE_ACTIVEWORMHOLES = 155;
  TYPE_MIRRORUNIVERSEPORTALDATA = 156;
  TYPE_MIRRORUNIVERSEDURATION = 157;
  TYPE_CHECKACCOUNTRESPONSE = 158;
  TYPE_ALLIANCELOYALTYSTATICDATA = 159;
  TYPE_ALLIANCEGETGAMEPROPERTIES = 160;
  TYPE_LOYALTYTIERREWARDS = 161;
  TYPE_GAMEACTIVITYRANKSDATA = 162;
  TYPE_GAMEACTIVITY = 163;
  TYPE_GAMEACTIVITYSPECS = 164;
  TYPE_GAMEACTIVITYPARTICIPANTSPECS = 165;
  TYPE_GAMEACTIVITYDETAILEDSPEC = 166;
  TYPE_GAMEACTIVITYSCHEDULESPEC = 167;
  TYPE_ALLIANCEPARTIES = 168;
  TYPE_PLAYERPARTY = 169;
  TYPE_PARTY = 200;
  TYPE_CREATEDPARTY = 201;
  TYPE_PARTYSPECS = 202;
}

  Type type = 1;
  bytes group = 2;
}

message ServiceResponse {
  repeated EntityGroup entityGroups = 1;
  repeated EntityGroup playerEntityGroups = 2;
  google.protobuf.Timestamp serverTime = 3;
  string userId = 4;
  string serverVersion = 5;
  Error error = 6;
}

message ShipXpConfig {
message XpConfig {
  map<int32, int64> xpRequired = 1;
}

  map<int32, XpConfig> xpConfig = 1;
}

message StarbaseConfig {
  int64 relocationResourceId = 1;
  repeated int32 drydockIds = 2;
  int64 relocationCost = 3;
  repeated int32 defenseModuleIds = 4;
  int32 relocationCooldownSeconds = 5;
}

message ShipTypeModifier {
  int32 playerHullType = 1;
  map<int32, float> opponentHullModifiers = 2;
}

message ThreatConfig {
  map<string, string> equations = 1;
  map<string, float> static = 2;
  repeated ShipTypeModifier shipTypeModifier = 3;
  map<string, double> staticDouble = 4;
}

message SimulateMarauderLootRollToolingResponse {
  string lookupKey = 1;
  int64 lootRollType = 2;
  repeated InventoryItem items = 3;
}

message RespawnMarauderTimersToolingResponse {
  google.protobuf.Timestamp timeToRespawn = 1;
}

message DeployedFleet {
  string uid = 1;
  DeployedFleetState state = 2;
  int64 courseId = 3;
  int64 nodeId = 4;
  NodeAddress nodeAddress = 5;
  DeployedFleetType fleetType = 6;
  int64 fleetId = 7;
  int32 pursuedByNum = 8;
  int64 pursuitTargetId = 9;
  bool isActive = 10;
  repeated int64 shipIds = 11;
  repeated int64 hullIds = 12;
  google.protobuf.Timestamp warpTime = 13;
  WarpData warpData = 14;
  float latestCourseVectorX = 15;
  float latestCourseVectorY = 16;
  google.protobuf.Timestamp lastUpdateTime = 17;
  map<int32, float> attributes = 18;
  map<int32, float> stats = 19;
  map<int64, ShipAttributes> shipAttributes = 20;
  map<int64, ShipAttributes> shipStats = 21;
  repeated ActiveBuff activeBuffs = 22;
  map<int64, int32> shipTiers = 23;
  map<int64, int32> shipLevels = 24;
  map<int64, float> shipLevelPercentages = 25;
  int64 battleOpponentFleetId = 26;
  bool battleWon = 27;
  google.protobuf.Timestamp battleStartTime = 28;
  map<int64, DeployedShip> deployedShips = 29;
  int64 armadaAttackId = 30;
  bool isArmadaAttackable = 31;
  map<int32, int64> shipCosmetics = 32;
  map<int32, int64> statusEffects = 33;
  repeated int64 detectedByAllianceIds = 34;
  int64 multiTargetArmadaId = 35;
  repeated ForbiddenTechData forbiddenTechs = 36;
  DamageSources causeOfDestruction = 37;
  repeated StatusCounter statusCounters = 38;
}

message WarpData {
  repeated int64 nodeIds = 1;
  int32 endX = 2;
  int32 endY = 3;
  TargetAction targetAction = 4;
  int64 destinationNodeId = 5;
}

message ShipAttributes {
  map<int32, float> shipAttributes_ = 1;
}

message DeployedShip {
  repeated int64 componentIds = 1;
}

message ForbiddenTechData {
  int64 id = 1;
  int32 level = 2;
  int32 tier = 3;
}

message StatusCounter {
  int64 statusId = 1;
  int64 counter = 2;
}

message Error {
  int32 code = 1;
  string type = 2;
  string error_ = 3;
}

message FactionSpec {
message Tier {
  int64 lowerBound = 1;
  int64 upperBound = 3;
  string tierName = 4;
  IdRefs idRefs = 2;
}

  int64 id = 1;
  string idStr = 2;
  string name = 3;
  int64 resourceId = 4;
  int32 sortingIndex = 5;
  bool isPrimary = 6;
  int64 parentFactionId = 7;
  string parentFactionName = 8;
  repeated Tier tiers = 9;
  IdRefs idRefs = 10;
  int64 researchTreeId = 11;
  repeated int64 researchTreeIds = 12;
}

message ForbiddenTech {
  int32 level = 1;
  int32 tier = 2;
  int64 id = 3;
  int32 shardCount = 4;
}

message ForbiddenTechChances {
  ForbiddenTechUpgradeType type = 1;
  repeated ForbiddenTechChance chances = 2;
  map<int64, int64> upgradeCost = 3;
  bool meetMinimumChance = 4;
}

message ForbiddenTechSpec {
  int64 id = 1;
  ForbiddenTechType type = 2;
  ForbiddenTechSubType subtype = 3;
  int32 sortIndex = 4;
  Rarity rarity = 5;
  repeated ForbiddenTechTier tiers = 6;
  repeated int64 levelupCosts = 7;
  repeated int64 tierupCosts = 8;
  IdRefs idRefs = 9;
  int32 shardsToUnlock = 10;
  int32 tierMax = 11;
  map<uint32, uint32> maxLevelTier = 12;
  int64 removePatternId = 13;
  int64 upgradePatternId = 14;
  int64 requiredSlotSpecId = 15;
  ClientModifierType modCostEfficiencyUnslot = 16;
  ClientModifierType modCostEfficiencyTierUp = 17;
  ClientModifierType modCostEfficiencyLevelUp = 18;
  bool guaranteedUpgrade = 19;
}

message ForbiddenTechChance {
  ForbiddenTechUpgradeChanceType chanceType = 1;
  float chancePercentage = 2;
}

message ForbiddenTechInstance {
  ForbiddenTech forbiddenTech = 1;
  ForbiddenTechOutcome outcome = 2;
}

message ForbiddenTechsResponse {
  repeated ForbiddenTech forbiddenTechs = 1;
}

message IdRefs {
  string artFileReference = 1;
  int64 locaId = 2;
  int64 artId = 3;
}

message GameActivityParticipantResult {
  EntityRef entityRef = 1;
  GameActivityResult result = 2;
}

message GameActivityPhase {
  int64 phaseSpecId = 1;
  google.protobuf.Timestamp startAt = 2;
}

message GameActivityTracker {
  EntityRef entityRef = 1;
  int32 score = 2;
}

message GameActivity {
  int64 activityId = 1;
  int64 activitySpecId = 2;
  repeated GameActivityTracker goalTracker = 3;
  repeated EntityRef participants = 4;
  google.protobuf.Timestamp startAt = 5;
  EntityRef activityEntity = 6;
  GameActivityPhase activityPhase = 7;
}

message GameActivityResultsResponse {
  GameActivity gameActivity = 1;
  repeated GameActivityParticipantResult results = 2;
}

message HailingFrequency {
  int64 hfId = 1;
  int64 targetId = 2;
}

message ServerInstanceInfo {
  ServerInstanceType type = 1;
  int32 id = 2;
  int32 galaxyId = 3;
}

message Job {
oneof Params {
  RefinementParams refinementParams = 8;
  RepairFleetParams repairFleetParams = 9;
  StarbaseConstructionParams starbaseConstructionParams = 10;
  ShipConstructionParams shipConstructionParams = 11;
  StarbaseRepairParams starbaseRepairParams = 12;
  TierUpShipParams tierUpShipParams = 13;
  AllianceContributionCooldownParams allianceContributionCooldownParams = 14;
  ResearchParams researchParams = 15;
  ScrapyardParams scrapyardParams = 16;
  AwayAssignmentParams awayAssignmentParams = 17;
}

  JobType type = 1;
  string uuid = 2;
  int32 duration = 3;
  int32 reductionInSeconds = 5;
  float jobSpeedupMod = 6;
  string userId = 7;
  EntityRef entityRef = 18;
  int32 tier = 19;
  google.protobuf.Timestamp startTime = 4;
}

message RefinementParams {
  int64 refinementId = 1;
  int64 amount = 2;
}

message RepairFleetParams {
  int64 fleetId = 1;
}

message StarbaseConstructionParams {
  int64 moduleId = 1;
  int32 level = 2;
}

message ShipConstructionParams {
  int64 referenceId = 1;
}

message StarbaseRepairParams {
  int64 platformId = 1;
}

message TierUpShipParams {
  int64 shipId = 1;
  int32 newTier = 2;
}

message AllianceContributionCooldownParams {
  int64 allianceId = 1;
}

message ResearchParams {
  int64 projectId = 1;
  int32 level = 2;
}

message ScrapyardParams {
  int64 hullId = 1;
  int64 shipId = 2;
  int32 level = 3;
  repeated int64 componentIds = 4;
}

message AwayAssignmentParams {
  int64 awayAssignmentInstanceId = 1;
}

message AllianceLoyaltyStaticDataResponse {
  AllianceLoyaltyConfig loyaltyConfig = 1;
  LoyaltySpecs loyaltySpecs = 2;
}

message LoyaltyTierRewards {
  repeated InventoryItem rewards = 1;
}

message PortalData {
  string warpId = 1;
  int64 resourceId = 2;
  int64 quantity = 3;
  Rarity rarity = 4;
}

message MirrorUniverseDuration {
  int64 seconds = 1;
}

message PortalDataResponse {
  PortalData portalData = 1;
}

message MirrorUniverseDurationResponse {
  MirrorUniverseDuration duration = 1;
}

message ActiveMission {
  MissionObjective activeObjective = 5;
  int64 id = 1;
  int64 missionId = 2;
  int64 assignedFleetId = 3;
  repeated int64 objectiveHistory = 4;
  MissionState state = 6;
  google.protobuf.Timestamp created = 7;
}

message ActiveObjective {
  int64 id = 1;
  ObjectiveState state = 2;
  MissionObjective.MissionAttributes overrideAttributes = 3;
  int64 currentCounterValue = 4;
}

message DialogueChunk {
  int64 factionId = 1;
  int64 characterId = 2;
  IdRefs characterIdRefs = 3;
  OfficerCoreStatType characterType = 4;
  DialogueSide characterPosition = 5;
  repeated int64 transIds = 6;
}

message Mission {
  int64 id = 1;
  int64 firstObjectiveId = 3;
  bool fleetRequired = 5;
  MissionType type = 6;
  MissionMetaData metadata = 7;
  google.protobuf.Timestamp lastModified = 8;
  repeated MissionObjective objectives = 2;
  repeated MissionRequirement acceptanceRequirements = 4;
}

message MissionRequirement {
message AllOfficersCoreStatTotalParams {
  OfficerCoreStatType type = 1;
  int32 value = 2;
}

message AtLeastOneOfficerWithCoreStatParams {
  OfficerCoreStatType type = 1;
  int32 value = 2;
}

message StarbaseModuleLevelParams {
  int32 type = 1;
  int32 value = 2;
}

message PreviouslyCompletedMissionParams {
  int64 value = 1;
}

message HullTypeParams {
  HullType type = 1;
  int32 value = 2;
}

message HullGradeParams {
  int32 grade = 1;
  int32 value = 2;
}

message ComponentValueParams {
  string type = 1;
  float value = 2;
}

message PlayerLevelRangeParams {
  int32 minValue = 1;
  int32 maxValue = 2;
}

message FactionStandingParams {
  int64 id = 1;
  int64 amount = 2;
}

oneof Params {
  AllOfficersCoreStatTotalParams allOfficersCoreStatTotalParams = 2;
  AtLeastOneOfficerWithCoreStatParams atLeastOneOfficerWithCoreStatParams = 3;
  StarbaseModuleLevelParams starbaseModuleLevelParams = 4;
  PreviouslyCompletedMissionParams previouslyCompletedMissionParams = 5;
  HullTypeParams hullTypeParams = 6;
  HullGradeParams hullGradeParams = 7;
  ComponentValueParams componentValueParams = 8;
  PlayerLevelRangeParams playerLevelRangeParams = 9;
  FactionStandingParams factionStandingParams = 10;
}

  MissionRequirementType type = 1;
}

message MissionMetaData {
  repeated DialogueChunk dialogueEndSuccess = 1;
  repeated DialogueChunk dialogueStart = 2;
  repeated DialogueChunk dialogueEndFailure = 3;
  IdRefs characterIdRefs = 4;
  IdRefs missionIdRefs = 5;
  int64 backgroundId = 7;
  int64 foregroundActorId = 8;
  int64 foregroundPropId = 9;
  int64 foregroundNodeId = 10;
  int64 foregroundSystemId = 11;
  int64 foregroundShipId = 12;
  int64 foregroundModuleId = 13;
  int64 factionId = 14;
  MissionRewardAnimation rewardAnimation = 15;
  int32 priority = 16;
  bool preventArchiving = 17;
  bool isSecondaryTutorial = 18;
}

message MissionObjective {
message MissionAttributes {
oneof Attributes {
  MissionObjective.TargetDestinationAttributes targetDestinationAttributes = 1;
  MissionObjective.PlanetDestinationAttributes planetDestinationAttributes = 2;
  MissionObjective.StarbaseModuleLevelAttributes starbaseModuleLevelAttribues = 3;
  MissionObjective.DefeatNPCInstantiatedAttributes defeatNpcInstantiatedAttribues = 4;
  MissionObjective.DefeatNPCGlobalAttributes defeatNpcGlobalAttribues = 5;
  MissionObjective.StartMiningAttributes startMiningAttribues = 6;
  MissionObjective.MineResourcesAttributes mineResourcesAttribues = 7;
  MissionObjective.ReturnFleetToStationAttributes returnFleetToStationAttribues = 8;
  MissionObjective.BuildFromBlueprintAttributes buildFromBlueprintAttribues = 9;
  MissionObjective.DummyObjectiveAttributes dummyObjectiveAttribues = 10;
  MissionObjective.DilemmaObjectiveAttributes dilemmaObjectiveAttribues = 11;
  MissionObjective.RecruitNewOfficerAttributes recruitNewOfficerAttribues = 12;
  MissionObjective.JoinAllianceAttributes joinAllianceAttribues = 13;
  MissionObjective.AttackStarbaseAttributes attackStarbaseAttribues = 14;
  MissionObjective.DonateResourcesAttributes donateResourcesAttributes = 15;
  MissionObjective.StockpileResourcesAttributes stockpileResourcesAttributes = 16;
  MissionObjective.CompleteFactionMissionsAttributes completeFactionMissionsAttributes = 17;
  MissionObjective.UpgradeShipAttributes upgradeShipAttributes = 18;
  MissionObjective.OfficerLevelAndRankAttributes officerLevelAndRankAttributes = 19;
  MissionObjective.DefeatFactionShipsAttributes defeatFactionShipsAttributes = 20;
  MissionObjective.AssignOfficerToDrydockAttributes assignOfficerToDrydockAttributes = 21;
  MissionObjective.MoveStarbaseAttributes moveStarbaseAttributes = 22;
  MissionObjective.DefeatChallengeNPCInstantiatedAttributes defeatChallengeNpcInstantiatedAttributes = 23;
  MissionObjective.VisitSectionAttributes visitSectionAttributes = 24;
}

}

message TargetDestinationAttributes {
  int64 targetSystem = 1;
  float targetX = 2;
  float targetY = 3;
  int32 objectiveRadius = 4;
}

message PlanetDestinationAttributes {
  int64 targetSystem = 1;
  int64 targetPlanet = 2;
  float targetX = 3;
  float targetY = 4;
  int32 objectiveRadius = 5;
}

message StarbaseModuleLevelAttributes {
  int64 moduleId = 1;
  int32 level = 2;
}

message DefeatNPCInstantiatedAttributes {
  int64 npcId = 1;
  int64 targetSystem = 2;
  float targetX = 3;
  float targetY = 4;
  int32 objectiveRadius = 5;
}

message DefeatChallengeNPCInstantiatedAttributes {
  int64 targetSystem = 1;
  float targetX = 2;
  float targetY = 3;
  int32 objectiveRadius = 4;
  int64 fleetId = 5;
}

message DefeatNPCGlobalAttributes {
  PveType npcType = 1;
  int32 count = 2;
  int64 targetSystem = 3;
  int32 level = 4;
}

message StartMiningAttributes {
  int64 targetSystem = 1;
  int64 targetNode = 2;
  int64 resourceId = 3;
}

message MineResourcesAttributes {
  int64 targetSystem = 1;
  int64 targetNode = 2;
  int64 resourceId = 3;
  int64 resourceAmount = 4;
}

message ReturnFleetToStationAttributes {
}

message BuildFromBlueprintAttributes {
  int64 blueprintId = 1;
}

message DummyObjectiveAttributes {
}

message DilemmaObjectiveAttributes {
}

message RecruitNewOfficerAttributes {
  int64 officerId = 1;
}

message JoinAllianceAttributes {
  int64 allianceId = 1;
}

message AttackStarbaseAttributes {
  int32 attackCount = 1;
  string targetUserId = 2;
  ExpectedBattleOutcome expectedOutcome = 3;
  int64 targetNode = 4;
}

message DonateResourcesAttributes {
  int64 resourceId = 3;
  int64 resourceAmount = 4;
}

message CompleteFactionMissionsAttributes {
  int64 factionId = 1;
  int32 missionCount = 2;
}

message UpgradeShipAttributes {
  int32 shipTier = 1;
  int32 shipGrade = 2;
}

message StockpileResourcesAttributes {
  int64 resourceId = 1;
  int64 resourceAmount = 2;
}

message OfficerLevelAndRankAttributes {
  int64 officerLevel = 1;
  int64 officerRank = 2;
  int64 officerId = 3;
}

message DefeatFactionShipsAttributes {
  int64 factionId = 1;
  int64 count = 2;
}

message AssignOfficerToDrydockAttributes {
  repeated int64 drydockIndices = 1;
  int64 officerId = 2;
}

message MoveStarbaseAttributes {
  int32 minimumSystemLevel = 1;
}

message VisitSectionAttributes {
  int64 sectionId = 1;
}

  int64 id = 1;
  ObjectiveType type = 2;
  int64 objectiveSpecId = 3;
  int64 objectiveFaction = 4;
  repeated int64 completionOptions = 5;
  bool autoComplete = 6;
  int32 difficulty = 9;
  repeated Inventory rewards = 10;
  MissionObjectiveMetaData metadata = 11;
  bool isDynamic = 12;
  int64 targetCounterValue = 13;
  MissionAttributes attributes = 7;
}

message MissionObjectiveMetaData {
  repeated DialogueChunk dialogueEnd = 1;
  repeated DialogueChunk dialogueStart = 2;
  repeated DialogueChunk dialogueDilemma = 3;
  int64 actionSpecId = 4;
  int64 transId = 5;
  int64 sectionId = 6;
  repeated ActionFlow actionFlow = 7;
  bool hasStickyToast = 8;
}

message ActionFlow {
  int64 type = 1;
  int64 actionId = 2;
  int64 transId = 3;
  bool hasBackground = 4;
}

message MissionLocationContainer {
  repeated MissionLocation missionLocations = 1;
}

message MissionLocation {
  int32 locationType = 1;
  NodeAddress nodeAddress = 2;
  Point point = 3;
}

message ObjectiveDefinition {
message RequiredAttribute {
  string key = 1;
  string value = 2;
}

  int64 id = 1;
  string name = 2;
  ObjectiveType type = 3;
  ObjectiveEventTrigger eventType = 4;
  repeated RequiredAttribute requiredAttributes = 5;
}

message BlueprintSpec {
  int64 id = 1;
  string idStr = 2;
  string name = 3;
  string type = 4;
  int32 grade = 5;
  int64 craftModuleId = 6;
  int32 partsNeeded = 7;
  int64 faction = 8;
  int64 consumable = 9;
  Rarity rarity = 10;
  int64 unlockModuleId = 11;
  int64 unlockModuleLevel = 12;
  BlueprintOutputType outputType = 13;
  int64 outputReference = 14;
  int32 craftLevel = 15;
  int32 craftTime = 16;
  map<int64, int64> craftCosts = 17;
  int32 refitTime = 18;
  map<int64, int64> refitCosts = 19;
  int32 repairTime = 20;
  map<int64, int64> repairCosts = 21;
  IdRefs idRefs = 22;
  int32 sortingIndex = 23;
  repeated Requirement requirements = 24;
  int64 viewLevel = 25;
  int32 scrapLevel = 26;
  map<int64, int64> scrapEarnings = 27;
}

message JobResponse {
  repeated Job jobs = 1;
}

message Notification {
message ChestContent {
  repeated InventoryItem inventoryItems = 1;
}

message MissionParams {
  int64 missionId = 1;
  int64 objectiveId = 2;
  int64 completionOption = 3;
  NotificationMissionType missionNotificationType = 4;
  int64 currentCounterValue = 5;
}

message TerritoryParams {
  int64 territoryId = 1;
  NotificationTerritoryType territoryNotificationType = 2;
}

message UserProfileParams {
  int32 level = 1;
  NotificationUserProfileType userProfileNotificationType = 2;
}

message ArmadaParams {
  ArmadaAttack armadaAttack = 1;
  NotificationArmadaType armadaNotificationType = 2;
}

message PlatformChestParams {
  repeated Notification.ChestContent chestsContents = 1;
  int32 numChests = 2;
}

message FactionParams {
  int64 factionId = 1;
  NotificationFactionType factionNotificationType = 2;
  int64 targetFleetId = 3;
}

message AllianceParams {
  int64 allianceId = 1;
  NotificationAllianceType allianceNotificationType = 2;
  string requestingUserId = 3;
  JobType jobType = 4;
  int64 oldRankId = 5;
  int64 newRankId = 6;
  string helperId = 7;
  string jobId = 8;
  int64 remainingTime = 9;
  string contributorUserId = 10;
  map<int64, int64> contributedResources = 11;
  string changedUserId = 12;
}

message AllianceDiplomacyParams {
  AllianceDiplomacyStatus status = 1;
  int64 targetAllianceId = 2;
  string changedByUserId = 3;
  int64 allianceId = 4;
}

message IncomingFleetParams {
oneof Params {
  string targetUserId = 3;
  int64 targetFleetId = 4;
}

  NotificationIncomingAttackTargetType targetType = 1;
  QuickScanFleetData quickScanResult = 2;
}

message AllianceChestParams {
  string allianceChestBuyer = 1;
  repeated Notification.ChestContent chestsContents = 2;
}

message CargoCollectParams {
  map<int64, int64> resourceDelta = 1;
  map<int64, int64> updatedResources = 2;
}

message TargetLostParams {
  int64 targetFleetId = 1;
  FleetInterceptInterruptionCause targetLostReason = 2;
  QuickScanFleetData quickScanResult = 3;
}

message StarbaseModuleRewardsParams {
  repeated InventoryItem inventoryItems = 1;
}

message CourseParams {
  int64 fleetId = 1;
  NotificationCourseType courseNotificationType = 2;
}

message ShipAbilityParams {
  string userId = 1;
  int64 targetFleetId = 2;
  int64 duration = 3;
  NotificationShipAbilityType abilityType = 4;
}

oneof Params {
  MissionParams missionParams = 5;
  UserProfileParams userProfileParams = 6;
  PlatformChestParams platformChestParams = 7;
  FactionParams factionParams = 8;
  AllianceParams allianceParams = 9;
  IncomingFleetParams incomingFleetParams = 10;
  AllianceChestParams allianceChestParams = 11;
  CargoCollectParams cargoCollectParams = 12;
  TargetLostParams targetLostParams = 13;
  StarbaseModuleRewardsParams starbaseModuleRewardsParams = 14;
  ArmadaParams armadaParams = 15;
  CourseParams courseParams = 16;
  AllianceDiplomacyParams diplomacyParams = 17;
  TerritoryParams territoryParams = 18;
  ShipAbilityParams shipAbilityParams = 19;
}

  string uuid = 1;
  google.protobuf.Timestamp createdTimestamp = 2;
  google.protobuf.Timestamp expiryTimestamp = 3;
  NotificationProducerType producerType = 4;
}

message NotificationsResponse {
  repeated Notification notifications = 1;
}

message Officer {
  int64 assignedFleetId = 1;
  int32 level = 2;
  int32 rankIndex = 3;
  int64 id = 4;
  int32 shardCount = 5;
  int64 awayAssignmentInstanceId = 6;
}

message OfficersResponse {
  repeated Officer officers = 1;
}

message InstancedPvPPartyParams {
  int64 averageRating = 1;
  float averageRank = 2;
  int32 leaderOpsLevel = 3;
  int64 gameActivityId = 4;
  int64 instanceId = 5;
  int64 allianceId = 6;
}

message Party {
oneof Params {
  InstancedPvPPartyParams instancedPvpParams = 9;
}

  string createdAt = 1;
  int64 id = 2;
  EntityRef leader = 3;
  int32 maxPlayers = 4;
  repeated EntityRef members = 5;
  PartyType partyType = 6;
  PartyState state = 7;
  int64 partySpecId = 8;
  map<string, bool> memberReadyStatus = 10;
}

message InstancedPvPPartySpecAttributes {
  int32 maxLeaderLevelDifference = 1;
  int32 minCreationOpsLevel = 2;
  int32 minLeaderLevelDifference = 3;
}

message PartySpec {
oneof Attributes {
  InstancedPvPPartySpecAttributes ipvpPartySpecAttributes = 5;
}

  int64 id = 1;
  string idStr = 2;
  int32 partyType = 3;
  int32 memberCount = 4;
  bool kickEnabled = 6;
  bool readyEnabled = 7;
}

message PartyListResponse {
  repeated Party parties = 1;
}

message PartyResponse {
  Party party = 1;
  int64 partyId = 2;
}

message Inventory {
  InventoryId id = 1;
  repeated InventoryItem items = 2;
  repeated InventoryItemType allowedTypes = 3;
  int32 numExtensions = 4;
}

message CommonInventoryItemParams {
  int64 refId = 1;
  int64 id = 2;
}

message ChestInventoryItemParams {
  string buyerId = 1;
  repeated InventoryItem chestItems = 2;
  Rarity rarity = 3;
  IdRefs idRefs = 4;
  ChestSourceType chestSource = 5;
}

message ResourceInventoryItemParams {
  int64 amount = 1;
}

message MetadataInventoryItemParams {
  bool isNew = 1;
  int64 previousCount = 2;
  InventoryItem sourceItem = 3;
}

message InventoryItem {
oneof Params {
  ChestInventoryItemParams chestParams = 11;
  ResourceInventoryItemParams resourceParams = 12;
}

  InventoryItemType type = 1;
  int64 count = 2;
  google.protobuf.Timestamp expiryTime = 9;
  CommonInventoryItemParams commonParams = 10;
  int64 quantity = 13;
  MetadataInventoryItemParams metadataParams = 14;
}

message InventoryResponse {
  map<int32, Inventory> inventories = 1;
}

message PrestigeResearchIds {
  repeated int64 researchIds = 1;
}

message PrestigeData {
  map<int64, PrestigeResearchIds> prestigeData_ = 1;
}

message QuickScanFleetData {
message FleetCrewData {
  int64 officerId = 1;
  int32 level = 2;
  int64 rank = 3;
}

  DeployedFleetType fleetType = 1;
  string targetId = 2;
  int64 targetFleetId = 3;
  IdRefs idRefs = 4;
  float offenseRating = 5;
  float defenseRating = 6;
  IdRefs chestIdRefs = 7;
  Rarity chestRarity = 8;
  int64 cargoSpace = 9;
  map<int32, FleetCrewData> bridgeOfficers = 10;
  float officerRating = 11;
  int64 factionId = 12;
  map<int64, int64> resources = 13;
  map<int64, int32> shipLevels = 14;
  map<int32, FleetCrewData> fleetOfficers = 15;
  IdRefs chestMtaIdRefs = 16;
  Rarity chestMtaRarity = 17;
}

message ResearchTreeSpec {
  int64 id = 1;
  IdRefs idRefs = 2;
  repeated int64 projects = 3;
  int32 type = 4;
  int64 viewLevel = 5;
  int64 factionId = 6;
  EntityType entityType = 7;
  int64 entityId = 8;
}

message StarbaseDetailedScan {
  string ownerUserId = 1;
  IdRefs chestIdRefs = 2;
  Rarity chestRarity = 3;
  map<int64, int64> resources = 4;
  int32 numDrydocks = 5;
  int32 numDefencePlatforms = 6;
  float currentShieldHp = 7;
  float maxShieldHp = 8;
  float currentHp = 9;
  float maxHp = 10;
  float shieldRegenerationDuration = 11;
  StarbaseShield playerShield = 12;
  map<int64, DeployedFleet> defensiveFleets = 13;
  DeployedFleet defensePlatformFleet = 14;
  google.protobuf.Timestamp lastUpdateTime = 15;
  map<int64, CrewData> fleetsOfficers = 16;
  google.protobuf.Timestamp ceasefireBrokenAt = 17;
  string ownerId = 18;
  int32 allianceStarbaseLevel = 19;
}

message CrewData {
  map<int32, OfficerData> officers = 2;
}

message OfficerData {
  int64 officerId = 1;
  int32 officerLevel = 2;
  int64 officerRank = 3;
}

message StarbaseShield {
  google.protobuf.Timestamp triggeredOn = 1;
  google.protobuf.Timestamp expiryTime = 3;
}

message StarbaseDetailedScanResponse {
  StarbaseDetailedScan starbaseDetailedScan = 1;
}

message EntitySlot {
oneof Params {
  ConsumableSlotParams consumableSlotParams = 5;
  OfficerPresetSlotParams officerPresetSlotParams = 6;
  WorkerSlotParams workerSlotParams = 7;
  FleetCommanderSlotParams fleetCommanderSlotParams = 8;
  SelectableSkillSlotParams selectableSkillSlotParams = 9;
  ChallengeLadderSlotParams challengeLadderSlotParams = 10;
  ForbiddenTechSlotParams forbiddenTechSlotParams = 11;
}

  int64 id = 1;
  int64 slotSpecId = 2;
  optional int64 slotItemId = 3;
  SlotType slotType = 4;
}

message OfficerPresetSlotParams {
  string name = 1;
  repeated int64 officerIds = 2;
  int32 order = 3;
}

message ConsumableSlotParams {
  string activatorPlayerId = 1;
  google.protobuf.Timestamp expiryTime = 2;
}

message FleetCommanderSlotParams {
  google.protobuf.Timestamp cooldownExpiration = 1;
  map<int64, int64> activatedAbilityDurationExpiration = 2;
  map<int64, int64> activatedAbilityCooldownExpiration = 3;
  int32 order = 4;
}

message SelectableSkillSlotParams {
  google.protobuf.Timestamp cooldownExpiration = 1;
}

message ForbiddenTechSlotParams {
  int64 ownerId = 1;
  int32 level = 2;
  int32 tier = 3;
}

message ChallengeLadderSlotParams {
  int64 ladderId = 1;
  int64 challengesCompleted = 2;
  int64 powerDifficulty = 3;
  int64 missionId = 4;
  int64 currentChallengeTries = 5;
  google.protobuf.Timestamp startTime = 6;
  int64 durationSeconds = 7;
  GeneratedShip generatedShip = 8;
  int32 lastClaimedMilestoneRewardIndex = 9;
  DeployedFleet deployedFleet = 10;
  int64 lastPowerDelta = 11;
  int64 minPowerIncrease = 12;
  int64 maxPowerIncrease = 13;
  google.protobuf.Timestamp completeTime = 14;
  float performanceRatio = 15;
}

message GeneratedShip {
  int64 hullId = 1;
  repeated int64 componentIds = 2;
  int64 power = 3;
  int64 seed = 4;
  IdRefs officerIdRefs = 5;
}

message WorkerSlotParams {
  string jobId = 1;
  Job job = 2;
}

message EntitySlots {
  repeated EntitySlot entitySlots_ = 1;
}

message EntitySlotsData {
message EntitySlots {
  EntityType entityType = 1;
  repeated EntitySlot slots = 2;
}

  repeated EntitySlots entitySlots = 1;
  repeated SlotType requestedSlotTypes = 2;
}

message BuffSpec {
message Attributes {
  int32 requiredRound = 1;
  int32 numRounds = 2;
  int32 durationSeconds = 3;
  BattleUnitState state = 4;
  OfficerCoreStatType officerStat = 5;
  float percentage = 6;
  int32 count = 7;
  int64 factionId = 8;
  int32 charges = 9;
  repeated string lootFilterKeys = 10;
  repeated int64 resources = 11;
  int32 grade = 12;
  int64 moduleId = 13;
}

  int64 buffId = 1;
  int32 targetCode = 7;
  int32 triggerCode = 8;
  BuffOperation op = 12;
  repeated float rankedChances = 13;
  repeated float rankedValues = 14;
  IdRefs idRefs = 15;
  Attributes attributes = 16;
  repeated int64 conditionCodes = 17;
  int64 modifierCode = 18;
  BuffRankedValueType rankedValueType = 19;
  bool showPercentage = 20;
  repeated double rankedBuffValues = 21;
}

message ComponentSpec {
  ComponentType type = 1;
  int64 id = 2;
  int64 recipeType = 3;
  string name = 4;
  string faction = 5;
  int32 grade = 6;
  Rarity rarity = 7;
  ComponentSubType subtype = 8;
  repeated HullType shipTypes = 9;
  IdRefs idRefs = 10;
  ArmorSpec armorSpec = 11;
  CargoSpec cargoSpec = 12;
  DeflectorSpec deflectorSpec = 13;
  ImpulseSpec impulseSpec = 14;
  SensorSpec sensorSpec = 15;
  ShieldSpec shieldSpec = 16;
  SpecialSpec specialSpec = 17;
  WarpSpec warpSpec = 18;
  WeaponSpec weaponSpec = 19;
  int32 tier = 20;
  repeated int64 upgradeIds = 21;
  float jobRepairCostModifier = 22;
  int64 factionId = 23;
}

message ConsumableSpec {
oneof Params {
  ConsumableBuffSpecParams consumableBuffSpecParams = 10;
  ConsumableUnlockSpecParams consumableUnlockSpecParams = 11;
}

  int64 id = 1;
  IdRefs idRefs = 2;
  ConsumableType consumableType = 3;
  int64 category = 4;
  Rarity rarity = 5;
  bool requiresSlot = 6;
  bool automaticActivation = 7;
  string name = 8;
  int32 grade = 9;
  EntityType targetType = 12;
  ShowInInventoryRule showInInventoryRule = 13;
}

message Cosmetic {
  int64 id = 1;
  string name = 2;
  IdRefs idRefs = 3;
  CosmeticType type = 4;
  int32 rarity = 5;
  int32 sorting = 6;
  bool inventoryRequired = 7;
  map<string, int64> data = 8;
}

message GameActivityPhaseSpec {
  int64 id = 1;
  string idStr = 2;
  repeated InflectionPointSpec endConditions = 3;
  repeated GameActivityRuleSpec rules = 4;
  GameActivityPhaseType phaseType = 5;
}

message GameActivityRuleSpec {
oneof Attributes {
  ActivityGoalRuleAttributes goal = 3;
  ActiveShipRuleAttributes activeShip = 4;
  RelocateRuleAttributes relocate = 5;
  RepairRuleAttributes repair = 6;
}

  GameActivityRuleType ruleType = 1;
  string ruleTypeStr = 2;
}

message GameActivityScheduleSpec {
  int64 gameActivitySpecId = 1;
  map<int32, ActivityDayScheduleSpec> byWeekday = 2;
}

message ActionSpec {
  int64 id = 1;
  Domain domain = 2;
  ActionType actionType = 3;
  ActionBehaviours behaviours = 4;
}

message ActivatedAbilitySpec {
  int64 id = 1;
  string idStr = 2;
  EntityType entityType = 3;
  ActivatedAbilityType abilityType = 4;
  int64 costResourceId = 5;
  int32 baseCost = 6;
  int32 costTierMultiplier = 7;
  int32 cooldown = 8;
  int32 cooldownTierMultiplier = 9;
  int32 duration = 10;
  int32 durationTierMultiplier = 11;
  int32 targetCode = 12;
  repeated int64 buffIds = 13;
  int64 statusEffect = 14;
  int32 modDurationInt = 15;
  int32 modDurationPercent = 16;
  int32 modCostPercent = 17;
  int32 modCooldownPercent = 18;
  IdRefs idRefs = 19;
  ActivatedAbilityCostType costType = 20;
  int64 costId = 21;
  ActivationSource activationSource = 22;
  int64 researchId = 23;
}

message AllianceLevelSpec {
message AllowedContribution {
  int64 cost = 1;
  int32 pointsGained = 2;
}

  int32 level = 1;
  int32 memberCap = 2;
  int32 pointsThreshold = 3;
  int32 helpLimit = 4;
  float helpPct = 5;
  int32 helpMinute = 6;
  map<int64, AllowedContribution> allowedContributions = 7;
  int32 territorySlots = 8;
}

message AlliancePermissionSpec {
  int64 id = 1;
  string name = 2;
  int32 bit = 3;
  IdRefs idRefs = 4;
}

message AllianceRankSpec {
  int64 id = 1;
  int32 permissions = 2;
  int32 rankLevel = 3;
  int32 sortingIndex = 4;
  IdRefs idRefs = 5;
}

message ArmorSpec {
  float hp = 1;
  float plating = 2;
  Modifiers modifiers = 3;
}

message BaseShipTierSpec {
  map<int64, int64> baseCosts = 1;
  int32 duration = 2;
  int32 maxShipLevel = 3;
  int32 tier = 4;
  Rarity rarity = 5;
}

message BuffConditionSpec {
  int64 id = 1;
  HullType hullType = 2;
  bool clientShouldShow = 3;
}

message BuffModifierSpec {
  int64 id = 1;
  ClientModifierType type = 2;
}

message BuffTargetSpec {
  int32 code = 1;
  int64 id = 2;
  string idStr = 3;
}

message BuffTriggerSpec {
  int32 code = 1;
  int64 id = 2;
  string idStr = 3;
  BuffSchemaType schema = 4;
}

message CargoSpec {
  float safeResources = 1;
  int64 resourceMax = 2;
  int32 generation = 3;
}

message Component {
  string componentType = 1;
  string recipeType = 2;
  string name = 3;
  float power = 4;
  string faction = 5;
  int32 grade = 6;
  int32 rarity = 7;
  string subtype = 8;
  repeated int32 shipTypes = 9;
}

message ComponentSpecResponse {
  map<int64, ComponentSpec> componentSpecs = 1;
}

message ConsumableBuffSpecParams {
  int64 buffId = 1;
  int32 durationSeconds = 2;
}

message ConsumableUnlockSpecParams {
  string unlockType = 1;
  int32 durationSeconds = 2;
  ResearchUnlockSpecParams researchProject = 3;
  SlotUnlockSpecParams slot = 4;
}

message ResearchUnlockSpecParams {
  int32 level = 1;
  int64 researchId = 2;
}

message SlotUnlockSpecParams {
  int64 slotSpecId = 1;
}

message DeflectorSpec {
  int32 deflection = 1;
}

message FactionBehaviourSpec {
  int32 factionInfluence = 1;
  int32 offsetSystemLevel = 2;
  int32 minAttackPeriod = 3;
  int32 maxAttackPeriod = 4;
  repeated int32 attackPeriod = 5;
}

message ForbiddenTechTier {
  int32 tier = 1;
  repeated int64 buffEffectsIds = 2;
}

message ForbiddenTechRemovalCost {
  int32 rarity = 1;
  map<int64, int32> costs = 2;
  int64 patternId = 3;
}

message ForbiddenTechCost {
  map<int64, int64> costs = 1;
}

message ForbiddenTechUpgradeCostSpec {
  int32 rarity = 1;
  map<int32, ForbiddenTechCost> tierCosts = 2;
  map<int32, ForbiddenTechCost> levelCosts = 3;
  int64 patternId = 4;
}

message GameActivityRanksSpec {
  int64 gameActivityRankId = 1;
  int64 ratingResourceId = 2;
  repeated GameActivityRank gameActivityRanksList = 3;
}

message GameActivityRank {
  IdRefs idRefs = 1;
  int64 ratingValue = 2;
  int64 ratingWin = 3;
  int64 ratingLoss = 4;
  int32 rankIndex = 5;
  int64 winResourceId = 6;
  int32 winResourceAmount = 7;
  int64 lossResourceId = 8;
  int32 lossResourceAmount = 9;
}

message ActivityScoreGoalAttributes {
  repeated int64 resources = 1;
}

message ActivityGoalRuleAttributes {
oneof Attributes {
  ActivityScoreGoalAttributes score = 2;
}

  GameActivityGoalType method = 1;
}

message ActiveShipRuleAttributes {
  int32 quantity = 1;
}

message RelocateRuleAttributes {
  int32 team = 1;
  int64 planetId = 2;
}

message RepairRuleAttributes {
  int32 duration = 1;
  int64 resource = 2;
  int32 amount = 3;
}

message InflectionPointSpec {
oneof Attributes {
  int32 score = 2;
  int32 duration = 3;
}

  GameActivityInflectionType type = 1;
}

message GameActivityDetailedSpecsResponse {
  int64 gameActivitySpecId = 1;
  repeated GameActivityRuleSpec rules = 2;
  repeated GameActivityPhaseSpec phases = 3;
}

message GameActivitySpec {
  int64 id = 1;
  string idStr = 2;
  GameActivityType type = 3;
  repeated int64 phases = 4;
  int64 rankId = 5;
  int64 participantId = 6;
}

message ParticipantPartySpec {
  int64 gameActivityRankId = 2;
  repeated int64 partySpecIds = 3;
}

message GameActivityParticipantSpec {
oneof Attributes {
  ParticipantPartySpec party = 4;
}

  int64 id = 1;
  string idStr = 2;
  GameActivityParticipantsType type = 3;
}

message ActivityScheduleSpec {
  string startTime = 1;
  string endTime = 2;
}

message ActivityDayScheduleSpec {
  repeated ActivityScheduleSpec schedules = 1;
}

message StaticSyncResourceSpecsResponse {
  map<int64, ResourceSpec> resourceSpecs = 1;
}

message StaticSyncHullSpecsResponse {
  map<int64, HullSpec> hullSpecs = 1;
}

message StaticSyncResourceConversionSpecsResponse {
  map<int64, ResourceConversionSpec> resourceConversionSpecs = 1;
}

message StaticSyncJobSpeedupResourceSpecsResponse {
  map<int32, JobSpeedupResourceSpec> jobSpeedupResourceSpecs = 1;
}

message StaticSyncStarbaseSpecsResponse {
  map<int64, StarbaseSpec> starbaseSpecs = 1;
}

message StaticSyncHazardSpecsResponse {
  map<int64, HazardSpec> hazardSpecs = 1;
}

message StaticSyncOfficerSpecsResponse {
  map<int64, OfficerSpec> officerSpecs = 1;
}

message StaticSyncFactionSpecsResponse {
  map<int64, FactionSpec> factionSpecs = 1;
}

message StaticSyncFactionBehaviourSpecsResponse {
  map<int32, FactionBehaviourSpec> factionBehaviourSpecs = 1;
}

message StaticSyncUserConsumableSpecsResponse {
  map<int32, UserConsumableSpec> userConsumableSpecs = 1;
}

message StaticSyncPlayerXpSpecsResponse {
  map<int32, PlayerXpSpec> playerXpSpecs = 1;
}

message StaticSyncObjectiveDefinitionsResponse {
  map<int32, ObjectiveDefinition> objectiveDefinitions = 1;
}

message StaticSyncAllianceRankSpecsResponse {
  map<int64, AllianceRankSpec> allianceRankSpecs = 1;
}

message StaticSyncAllianceLevelSpecsResponse {
  map<int32, AllianceLevelSpec> allianceLevelSpecs = 1;
}

message StaticSyncAlliancePermissionSpecsResponse {
  map<int64, AlliancePermissionSpec> alliancePermissionSpecs = 1;
}

message StaticSyncOfficerAbilitySpecsResponse {
  map<int64, BuffSpec> officerAbilitySpecs = 1;
}

message StaticSyncBuffTargetSpecsResponse {
  map<int64, BuffTargetSpec> buffTargetSpecs = 1;
}

message StaticSyncBuffTriggerSpecsResponse {
  map<int64, BuffTriggerSpec> buffTriggerSpecs = 1;
}

message StaticSyncShipBonusSpecsResponse {
  map<int64, BuffSpec> shipBonusSpecs = 1;
}

message StaticSyncOfficerCoreStatSpecsResponse {
  map<int32, OfficerCoreStatSpec> officerCoreStatSpecs = 1;
}

message StaticSyncOfficerCoreStatThresholdsSpecsResponse {
  map<int32, OfficerCoreStatThresholdsSpec> officerCoreStatThresholds = 1;
}

message StaticSyncOfficerIntelRequirementSpecsResponse {
  map<int32, OfficerIntelRequirementSpec> officerIntelRequirementSpecs = 1;
}

message StaticSyncBlueprintSpecsResponse {
  map<int64, BlueprintSpec> blueprintSpecs = 1;
  map<int64, int64> outputReferenceToId = 2;
}

message StaticSyncScrapyardSpecsResponse {
  repeated ScrapyardSpec scrapyardSpecs = 1;
}

message StaticSyncOfficerPromotionSpecsResponse {
  map<int32, OfficerPromotionSpec> officerPromotionSpec = 1;
}

message StaticSyncNavigationConfResponse {
  NavigationConfig navigationConfig = 1;
}

message StaticSyncFleetConfResponse {
  FleetConfig fleetConfig = 1;
}

message StaticSyncAllianceConfResponse {
  AllianceConfig allianceConfig = 1;
}

message StaticSyncArmadaConfResponse {
  ArmadasConfig armadaConfig = 1;
}

message StaticSyncConsistencyConfResponse {
  ConsistencyConfig consistencyConfig = 1;
}

message StaticSyncFtueConfResponse {
  FtueConfig ftueConfig = 1;
}

message StaticSyncPlacementConfResponse {
  PlacementConfig placementConfig = 1;
}

message StaticSyncDialogConfResponse {
  DialogueConfig dialogueConfig = 1;
}

message StaticSyncFactionConfResponse {
  FactionConfig factionConfig = 1;
}

message StaticSyncResourceConfResponse {
  ResourceConfig resourceConfig = 1;
}

message StaticSyncFtueProgressionConfResponse {
  FtueProgressionConfig ftueProgressionConfig = 1;
}

message StaticSyncServerTransferConfig {
  ServerTransferConfig serverTransferConfig = 1;
}

message StaticSyncNewPlayerConfResponse {
  NewPlayerConfig newPlayerConfig = 1;
}

message StaticSyncThreatConfResponse {
  ThreatConfig threatConfig = 1;
}

message StaticSyncPlanetSlotsConfResponse {
  map<int32, PlanetSlotsConfig> planetSlotsConfig = 1;
}

message StaticSyncBattleConfResponse {
  BattleConfig battleConfig = 1;
}

message StaticSyncStarbaseConfResponse {
  StarbaseConfig starbaseConfig = 1;
}

message StaticSyncShipXpConfResponse {
  ShipXpConfig shipXpConfig = 1;
}

message ClientShipStatLookupSpecsResponse {
  ClientShipStatLookupSpec clientShipStatLookupSpecs = 1;
}

message StaticSyncBaseShipTierSpecsResponse {
  map<int32, BaseShipTierSpec> baseShipTierSpecs = 1;
}

message StaticSyncShipTierSpecsResponse {
  map<int64, ShipTierSpec> shipTierSpecs = 1;
}

message StaticSyncGlobalDamageReductionConfigResponse {
  GlobalDamageReductionConfig globalDamageReductionConfig = 1;
}

message StaticSyncMitigationCapsSpecResponse {
  MitigationCapsSpec mitigationCapsSpec = 1;
}

message StaticSyncActionSpecResponse {
  repeated ActionSpec actionSpecs = 1;
}

message StaticSyncShipLevelUpBonusBuffSpecResponse {
  map<int64, ShipLevelUpBonusBuffSpec> shipLevelUpBonusBuffSpecs = 1;
}

message StaticSyncOfficerSynergyFactorSpecsResponse {
  map<int32, OfficerSynergyFactorSpec> officerSynergyFactorSpecs = 1;
}

message StaticSyncOfficerConfResponse {
  OfficerConfig officerConfig = 1;
}

message StaticSyncResearchTreeSpecsResponse {
  repeated ResearchTreeSpec researchTrees = 1;
  map<int64, ResearchProjectSpec> researchProjects = 2;
  map<int64, BuffSpec> researchEffects = 3;
}

message StaticSyncStarbaseBuffsSpecsResponse {
  map<int64, BuffSpec> starbaseBuffsSpecs = 1;
}

message StaticSyncConsumableBuffsSpecsResponse {
  map<int64, BuffSpec> consumableBuffsSpecs = 1;
}

message StaticSyncPvPBandingResponse {
  repeated PvPBandingLevel pvpBandingLevels = 1;
  repeated PvPBandingLevel pvpBandingMiningLevels = 2;
  int32 miningUnlock = 3;
  int32 shipUnlock = 4;
  int32 stationUnlock = 5;
}

message StaticSyncArmadaAttackSpecResponse {
  repeated ArmadaAttackSpec spec = 1;
}

message StaticSyncArmadaPveSpecResponse {
  map<int64, ArmadaPveSpec> spec = 1;
}

message StaticSyncArmadaPvpSpecResponse {
  map<int64, ArmadaPvpSpec> spec = 1;
}

message StaticSyncMiningSetupResponse {
  map<int64, MiningSetup> miningSetups = 1;
}

message StaticSyncMarauderInfoResponse {
  map<int64, MarauderInfo> marauderInfo = 1;
}

message StaticSyncCosmeticsResponse {
  repeated Cosmetic cosmetics = 1;
}

message CeasefireResponse {
  Ceasefire ceasefire = 1;
}

message StaticSyncPrestigeDataResponse {
  PrestigeData prestigeData = 1;
}

message StaticSyncWorkerResponse {
  repeated WorkerSpec spec = 1;
}

message StaticSyncAwayAssignmentsResponse {
  repeated int64 refreshTimePeriods = 1;
  Resource refreshCost = 2;
}

message StaticSyncConsumableSpecsResponse {
  repeated ConsumableSpec spec = 1;
}

message StaticSyncSlotSpecsResponse {
  repeated SlotSpec spec = 1;
}

message StaticSyncTraitsResponse {
  repeated TraitsSpec traits = 1;
}

message StaticSyncOfficerTraitsResponse {
  repeated OfficerToTraitSpec officerTraits = 1;
}

message StaticSyncLoyaltyResponse {
  LoyaltyConfig loyaltyConfig = 1;
  LoyaltySpecs loyaltySpecs = 2;
}

message StaticSyncPeaceShieldRulesResponse {
  PeaceShieldRulesConfig peaceShieldRulesSpecs = 1;
}

message StaticSyncActivatedShipAbilityConfigsResponse {
  repeated ActivatedShipAbilityConfig activatedShipAbilityConfig = 1;
}

message StaticSyncAllianceStarbaseConfResponse {
  AllianceStarbaseConfig allianceStarbaseConfig = 1;
}

message StaticSyncAchievementsConfResponse {
  AchievementsConfig achievementsConfig = 1;
}

message GameworldResponse {
  int32 gameworldId = 1;
}

message StaticSyncActivatedAbilitySpecsResponse {
  repeated ActivatedAbilitySpec spec = 1;
}

message StaticSyncOfficerProgressRewardSpecsResponse {
  repeated OfficerProgressRewardSpec spec = 1;
}

message StaticSyncCommanderSkillSpecsResponse {
  map<int64, CommanderSkillSpec> spec = 1;
}

message StaticSyncCommanderIntelRequirementSpecsResponse {
  map<int32, OfficerIntelRequirementSpec> commanderIntelRequirementSpecs = 1;
}

message StaticSyncHailingFrequenciesConfResponse {
  HailingFrequenciesConfig hailingFrequenciesConfig = 1;
}

message StaticSyncOfficerLevelRewardsSpecsResponse {
  map<int64, OfficerLevelRewardsSpec> officerLevelRewardsSpecs = 1;
}

message StaticSyncChallengeLaddersSpecsResponse {
  map<int64, ChallengeLadderSpec> challengeLaddersSpecs = 1;
}

message StaticSyncBundleRewardsSpecsResponse {
  map<int64, BundleRewardsSpec> bundleRewardsSpecs = 1;
}

message StaticSyncForbiddenTechSpecsResponse {
  repeated ForbiddenTechSpec forbiddenTechSpecs = 1;
}

message StaticSyncForbiddenTechBuffsSpecsResponse {
  map<int64, BuffSpec> forbiddenTechBuffsSpecs = 1;
}

message StaticSyncForbiddenTechRemovalCostsSpecsResponse {
  repeated ForbiddenTechRemovalCost forbiddenTechRemovalCostsSpecs = 1;
}

message StaticSyncForbiddenTechConfResponse {
  ForbiddenTechConfig forbiddenTechConfig = 1;
}

message StaticSyncChallengeConfResponse {
  ChallengeConfig challengeConfig = 1;
}

message StaticSyncForbiddenTechUpgradeCostsSpecsResponse {
  repeated ForbiddenTechUpgradeCostSpec forbiddenTechUpgradeCostsSpecs = 1;
}

message StaticSyncGameActivityRanksSpecResponse {
  repeated GameActivityRanksSpec gameActivityRanksSpecs = 1;
}

message StaticSyncGameActivitySpecsResponse {
  repeated GameActivitySpec gameActivitySpecs = 1;
}

message StaticSyncGameActivityParticipantSpecsResponse {
  map<int64, GameActivityParticipantSpec> gameActivityParticipantSpecs = 1;
}

message StaticSyncGameActivityScheduleSpecsResponse {
  repeated GameActivityScheduleSpec gameActivityScheduleSpecs = 1;
}

message StaticSyncPartySpecsResponse {
  map<int64, PartySpec> partiesSpecs = 1;
}

message HazardSpec {
message HazardLevel {
  int32 level = 1;
  float strength = 2;
}

  int64 id = 1;
  string name = 2;
  HazardType type = 3;
  HazardEffect effect = 4;
  IdRefs idRefs = 5;
  float baseDamage = 6;
  repeated HazardLevel levels = 7;
  float rate = 8;
}

message ComponentSlotModifier {
  ComponentSlotAction action = 1;
  float modifier = 2;
  ComponentType type = 3;
  ComponentSubType subType = 4;
}

message HullSpec {
message Component {
  repeated ComponentSlotModifier modifiers = 1;
}

message OfficerSlotBonus {
  string stat = 1;
  float modifier = 2;
}

message OfficerSlots {
  repeated HullSpec.OfficerSlotBonus slotBonuses = 1;
  OfficerCoreStatType requiredType = 2;
}

message CrewSlot {
  int32 index = 1;
  int32 unlockLevel = 2;
}

message CoreStatModifier {
  OfficerCoreStatType type = 1;
  float bonus = 2;
  float threshold = 3;
}

  int64 id = 1;
  string idStr = 2;
  string name = 3;
  HullType type = 4;
  Faction faction = 5;
  int32 grade = 6;
  int32 numOfficerSlots = 7;
  int32 xpAmount = 8;
  int32 hullHp = 10;
  int32 ratingMax = 11;
  IdRefs idRefs = 12;
  repeated int64 componentDefaults = 13;
  repeated int32 componentIndices = 14;
  map<int32, Component> components = 15;
  repeated OfficerSlots officerSlots = 16;
  repeated CrewSlot crewSlots = 17;
  float replotTimeMax = 18;
  float jobRepairCostModifier = 19;
  repeated CoreStatModifier coreStatModifiers = 20;
  int32 initiative = 21;
  int32 sortOrder = 22;
  int32 tierMax = 23;
  string craftingId = 24;
  Rarity rarity = 25;
  int64 factionId = 26;
  FleetArmadaCategory category = 27;
  repeated int64 activatedAbilitiesIds = 28;
  map<int64, int64> abilityUnlockResearchIds = 29;
  int64 forbiddenTechSlot1SpecId = 30;
  int32 forbiddenTechSlot1TierReq = 31;
  map<int64, int32> forbiddenTechSlot1Cost = 32;
  bool peaceShieldDownWhenAttacked = 33;
  int32 generation = 34;
  repeated int64 shipBonuses = 35;
  int64 forbiddenTechSlot2SpecId = 36;
  int32 forbiddenTechSlot2TierReq = 37;
  map<int64, int32> forbiddenTechSlot2Cost = 38;
}

message ImpulseSpec {
  float dodge = 1;
  float impulse = 2;
}

message JobSpeedupResourceSpec {
message Cost {
  float modifier = 1;
  int64 resourceId = 2;
}

message Costs {
  EntityType entityType = 1;
  repeated JobSpeedupResourceSpec.Cost costs_ = 2;
}

  int32 jobType = 1;
  repeated Cost costs = 2;
  repeated Costs costsByEntity = 3;
}

message LoyaltyConfig {
  int64 resourceId = 1;
  int32 minPlayerLevel = 2;
  int32 claimAllMinLevel = 3;
}

message AllianceLoyaltyConfig {
  int64 resourceId = 1;
  int32 minAllianceLevel = 2;
}

message LoyaltySpecs {
  repeated LoyaltyTier loyaltyTiers = 1;
}

message LoyaltyTier {
  int64 id = 1;
  string idStr = 2;
  int32 minPoints = 3;
  int32 maxPoints = 4;
  int32 rewardDescriptorCount = 5;
  repeated LoyaltyBuffRewardCollectionsSpec buffRewardCollections = 6;
  int32 tier = 7;
}

message LoyaltyBuffRewardCollectionsSpec {
  repeated LoyaltyBuffRewardsSpec buffRewards = 1;
  int32 index = 2;
}

message LoyaltyBuffRewardsSpec {
  int64 buffId = 1;
  int32 index = 2;
}

message MitigationCapsSpec {
message MitigationCap {
  map<int32, float> caps = 1;
  string name = 2;
  map<int32, float> officerBonusMultipliers = 3;
}

  repeated MitigationCap mitigationCaps = 1;
}

message Modifiers {
  float baseEnergy = 1;
  float energy = 2;
  int32 baseKineticInt = 3;
  int32 kineticInt = 4;
  float baseKinetic = 5;
  float kinetic = 6;
}

message ModuleEffectSpec {
oneof RankedTypedValues {
  RankedValuesFloat rankedValuesFloat = 7;
  RankedValuesInt rankedValuesInt = 8;
}

  int64 id = 1;
  string key = 2;
  int64 resourceId = 3;
  string uniqueDescriptor = 4;
  repeated float rankedValues = 5;
  IdRefs idRefs = 6;
}

message RankedValuesFloat {
  repeated float rankedValuesFloat_ = 1;
}

message RankedValuesInt {
  repeated int64 rankedValuesInt_ = 1;
}

message OfficerCoreStatSpec {
  int32 level = 1;
  map<int32, float> stats = 2;
}

message OfficerCoreStatThresholdsSpec {
message Threshold {
  int32 statTotal = 1;
  float statBonus = 2;
}

  repeated Threshold thresholds = 1;
}

message OfficerIntelRequirementSpec {
  int32 level = 1;
  map<int32, int64> requirements = 2;
}

message PromotionCost {
  int32 shardsRequired = 1;
  int64 intelCost = 2;
  int64 material1Cost = 3;
  int64 material2Cost = 4;
}

message OfficerPromotionSpec {
  int32 rank = 1;
  int32 maxLevel = 2;
  map<int32, PromotionCost> costs = 3;
  int32 ratingFactor = 4;
}

message OfficerSpec {
message Level {
  repeated InventoryItem rewards = 1;
}

  int64 id = 1;
  int64 synergyId = 5;
  int64 synergyLocaId = 6;
  int64 synergyArtId = 7;
  OfficerCoreStatType officerClassType = 9;
  Faction faction = 10;
  Rarity rarity = 11;
  IdRefs idRefs = 13;
  google.protobuf.Timestamp validFrom = 14;
  int32 attack = 15;
  int32 defense = 16;
  int32 health = 17;
  int64 captainManeuverId = 18;
  int64 officerAbilityId = 19;
  int32 sortIndex = 20;
  int64 promotionMaterial1Id = 21;
  int64 promotionMaterial2Id = 22;
  int64 factionId = 23;
  int32 shardsToUnlock = 24;
  repeated OfficerRank ranks = 25;
  int64 belowDecksAbilityId = 26;
  OfficerType officerType = 27;
  int64 progressRewardType = 28;
  int64 intelType = 29;
  int64 progressRewardSchema = 30;
  repeated int64 progressRewardSchemas = 31;
  repeated Level levels = 32;
  int32 modFcCooldownPercent = 33;
  repeated int64 activatedAbilitiesIds = 34;
  map<int64, int64> abilityUnlockResearchIds = 35;
}

message OfficerSynergyFactorSpec {
message ManeuverFactor {
  float factor = 1;
  int32 total = 2;
}

  int32 coreStatType = 1;
  repeated ManeuverFactor maneuverFactors = 2;
}

message PlayerXpSpec {
message Rewards {
  repeated InventoryItem items = 1;
}

  int32 level = 1;
  int64 xpThreshold = 2;
  map<int32, Rewards> rewards = 3;
}

message PvPBandingLevel {
  int32 lowerBand = 1;
  int32 upperBand = 2;
}

message Requirement {
  RequirementType type = 1;
  int64 targetId = 2;
  int64 level = 3;
  RequirementParam params = 4;
}

message RequirementParam {
oneof Params {
  NumOfficersAtTierParams numOfficersAtTierParams = 1;
}

}

message NumOfficersAtTierParams {
  int32 rarity = 1;
  int32 rank = 2;
  int32 amount = 3;
}

message ResearchTreesState {
  map<int64, int32> researchProjectLevels = 1;
}

message ResearchProjectLevel {
  int64 researchTimeInSeconds = 1;
  repeated Resource costs = 2;
  int64 hardCurrencyCost = 3;
  repeated Requirement requirements = 4;
  repeated InventoryItem rewards = 5;
  int64 militaryMight = 6;
}

message ResearchProjectSpec {
  int64 id = 1;
  int64 researchTreeId = 2;
  IdRefs idRefs = 3;
  repeated ResearchProjectLevel levels = 4;
  repeated int64 buffEffectsIds = 5;
  bool doubler = 6;
  int64 viewLevel = 7;
  EntityType entityType = 8;
  int32 generation = 9;
}

message Resource {
  int64 resourceId = 1;
  int64 value = 2;
}

message ResourceConversionRate {
  float threshold = 1;
  float multiplier = 2;
}

message ResourceConversionSpec {
  int64 id = 1;
  string idStr = 2;
  int32 subtype = 3;
  ResourceConversionType conversionType = 4;
  float activateLevelUp = 5;
  float freeSkipThreshold = 6;
  repeated ResourceConversionRate rates = 7;
  int32 generation = 8;
}

message ResourceSpec {
oneof Params {
  ResourceSpeedupParameters speedupParams = 13;
  ResourceBatchParameters batchParams = 14;
  ResourcePeaceShieldParameters peaceShieldParams = 19;
}

  int64 id = 1;
  string idStr = 2;
  string name = 3;
  string resourceId = 4;
  ResourceSubtype subtype = 5;
  int32 grade = 6;
  int64 cap = 7;
  bool canBePurchased = 8;
  int32 sortingIndex = 9;
  bool skipCargo = 10;
  bool exceedCap = 11;
  IdRefs idRefs = 12;
  ConsumableResourceLevel consumableLevel = 15;
  Rarity rarity = 16;
  bool showInInventory = 17;
  ShowInInventoryRule showInInventoryRule = 18;
  float miningNodeThreshold = 20;
  ResourceOwnerType ownerType = 21;
  int32 generation = 22;
}

message ResourceSpeedupParameters {
  int64 reductionInSeconds = 1;
  repeated JobType supportedJobs = 2;
}

message ResourceBatchParameters {
  int64 resourceId = 1;
  int64 resourceAmount = 2;
}

message ResourcePeaceShieldParameters {
  PeaceShieldType shieldType = 1;
  int64 durationInSeconds = 2;
}

message ScrapyardSpec {
  int64 hullId = 1;
  int32 level = 2;
  map<int64, int64> resources = 3;
  int32 scrapTimeSeconds = 4;
}

message SensorSpec {
  int32 sensorRating = 1;
}

message ShieldSpec {
  float absorption = 1;
  float hp = 2;
  Modifiers modifiers = 3;
  int32 regenerationTimeSeconds = 4;
  float mitigation = 5;
}

message ShipLevelUpBonusBuffSpec {
  repeated BuffSpec shipLevelUpBonusBuffSpecs = 1;
}

message ShipLevelUpBonusSpec {
  int32 grade = 1;
  repeated float factors = 2;
  int64 modifierId = 3;
}

message ShipTierSpec {
  float costDurationFactor = 1;
  float costResourceFactor = 2;
  int64 hullId = 3;
  float scrapXpFactor = 4;
  map<int32, TierCost> tierCosts = 5;
  map<int32, TierStatModifier> tierStatModifiers = 6;
}

message TierCost {
  int32 tier = 1;
  map<int64, int64> costs = 2;
}

message TierStatModifier {
  int32 tier = 1;
  map<int32, float> statModifiers = 2;
}

message ConsumablesSlotSpecParams {
  repeated int64 allowedCategories = 1;
  repeated ConsumableType allowedConsumableTypes = 2;
  ConsumableType allowedConsumableType = 3;
  bool autoReplaceable = 4;
}

message OfficerPresetsSpecParams {
  int64 upgradeResearchId = 1;
}

message WorkerSlotSpecParams {
  int32 jobType = 1;
}

message FleetCommanderSlotSpecParams {
  int32 cooldown = 1;
}

message SelectableSkillSlotSpecParams {
  int32 cooldown = 1;
  int64 officerId = 2;
  int32 selectableGroupId = 3;
}

message ChallengeLadderSlotSpecParams {
  int64 ladderId = 1;
}

message ForbiddenTechSlotSpecParams {
}

message SlotSpec {
oneof Params {
  ConsumablesSlotSpecParams consumableSlotSpecParams = 7;
  OfficerPresetsSpecParams officerPresetSpecParams = 8;
  WorkerSlotSpecParams workerSlotSpecParams = 9;
  FleetCommanderSlotSpecParams fleetCommanderSlotSpecParams = 10;
  SelectableSkillSlotSpecParams selectableSkillSlotSpecParams = 11;
  ChallengeLadderSlotSpecParams challengeLadderSlotSpecParams = 12;
  ForbiddenTechSlotSpecParams forbiddenTechSlotSpecParams = 13;
}

  int64 id = 1;
  SlotType slotType = 2;
  IdRefs idRefs = 3;
  int32 maxSlots = 4;
  string name = 5;
}

message SpecialSpec {
message Stat {
  int32 statId = 1;
  float value = 2;
}

  repeated Stat stats = 1;
}

message StarbaseInfoResponse {
  StarbaseInfo starbase = 1;
  map<string, StarbaseModuleInfo> starbaseModules = 2;
  map<string, ResourceHarvester> resourceHarvesters = 3;
}

message StarbaseInfo {
  int32 state = 2;
  NodeAddress location = 3;
  Point coordinates = 4;
  google.protobuf.Timestamp lastRelocation = 5;
  NodeAddress destination = 6;
}

message StarbaseModuleInfo {
  int64 id = 1;
  int64 level = 2;
}

message ResourceHarvester {
  int64 id = 1;
  google.protobuf.Timestamp lastSnapshot = 2;
  google.protobuf.Timestamp lastHarvest = 3;
  float currentAmount = 4;
  bool isActive = 5;
}

message StarbaseSpec {
message Attribute {
  int64 resourceType = 1;
  int32 drydockFleetCountLimit = 2;
}

message Level {
oneof Attribute {
  int64 resourceType = 11;
}

  int64 buildTimeInSeconds = 1;
  int64 playerXp = 2;
  int64 hardCurrencyCost = 3;
  repeated InventoryItem rewards = 5;
  repeated Requirement requirements = 6;
  repeated Resource resources = 7;
  int64 militaryMight = 8;
  int32 generation = 10;
}

  int64 id = 1;
  string name = 2;
  string type = 3;
  int32 startingModule = 4;
  int32 section = 5;
  Attribute attribute = 7;
  repeated Level levels = 8;
  repeated int64 buffIds = 9;
}

message TraitsSpec {
  int64 id = 1;
  string idStr = 2;
  IdRefs idRefs = 3;
  int64 sortingOrder = 4;
}

message TraitCostsSpec {
  repeated Resource costs = 1;
}

message TraitCostsPerLevelSpec {
  int64 traitId = 1;
  map<int32, TraitCostsSpec> costsPerLevel = 2;
}

message TraitRequirementsSpec {
  int64 traitId = 1;
  int32 requiredRank = 2;
}

message TraitWithMaxLevelSpec {
  int64 traitId = 1;
  int32 maxLevel = 2;
}

message OfficerToTraitSpec {
  int64 officerId = 1;
  repeated TraitCostsPerLevelSpec traits = 2;
  repeated TraitRequirementsSpec traitProgression = 3;
}

message UserConsumableSpec {
message Attributes {
oneof Attribute {
  int32 xp = 2;
}

}

  int64 id = 1;
  int32 consumableType = 2;
  Attributes attributes = 3;
}

message WarpSpec {
  float warpSpeed = 1;
  int32 warpDistance = 2;
  InstantWarpSpec instantWarpSpec = 3;
  TowingSpec towingSpec = 4;
  CloakingSpec cloakingSpec = 5;
  SupportShipSpec supportShipSpec = 6;
  DebuffShipSpec debuffShipSpec = 7;
}

message InstantWarpSpec {
  float costMultiplier = 1;
  int64 costResourceId = 2;
  int32 baseCost = 3;
}

message TowingSpec {
  float costMultiplier = 1;
  int64 unlockResearchId = 2;
}

message CloakingSpec {
  int64 duration = 1;
  int64 costResourceId = 2;
  int32 baseCost = 3;
  int64 unlockResearchId = 4;
  int64 cooldown = 5;
}

message SupportShipSpec {
  int64 duration = 1;
  int64 costResourceId = 2;
  int32 baseCost = 3;
  int64 cooldown = 4;
  int64 baseBuffId = 5;
}

message DebuffShipSpec {
  int64 duration = 1;
  int64 costResourceId = 2;
  int64 baseCost = 3;
  int64 cooldown = 4;
  repeated int64 baseBuffIds = 5;
}

message WeaponSpec {
message Debuffs {
  int32 damage = 1;
  int32 accuracy = 2;
}

message Modifiers {
  int32 hullInt = 1;
  int32 baseInt = 2;
  int32 shieldsInt = 3;
  float hull = 4;
  float base = 5;
  float shields = 6;
}

message Attack {
  float critChance = 1;
  int32 warmUp = 2;
  float modulation = 3;
  int32 damageOverTimeRounds = 4;
  int32 damageOverTime = 5;
  int32 coolDown = 6;
  float critModifier = 7;
  int64 minimumDamage = 8;
  int64 penetration = 9;
  int32 shots = 10;
  int64 maximumDamage = 11;
  int64 accuracy = 12;
}

  int32 delayRounds = 1;
  int32 delayChance = 2;
  Debuffs debuffs = 3;
  Modifiers modifiers = 4;
  Attack attack = 5;
}

message WorkerSpec {
  int64 id = 1;
  string idStr = 2;
  IdRefs idRefs = 3;
  JobType jobType = 4;
  ShowInInventoryRule showInInventoryRule = 18;
  int64 subtype = 19;
}

message AllianceAssignedTerritorySlot {
enum TerritorySlotState {
  TERRITORYSLOTSTATE_TAKEOVER = 0;
  TERRITORYSLOTSTATE_OWNED = 1;
}

  int64 territoryId = 1;
  TerritorySlotState state = 2;
}

message AllianceTerritorySlots {
  int64 allianceId = 1;
  int64 slotSize = 2;
  map<int64, AllianceAssignedTerritorySlot> assignedSlots = 3;
}

message Territory {
  int64 territoryId = 1;
  repeated int64 nodeIds = 2;
  int32 tier = 3;
  repeated TerritoryTakeoverPeriod takeoverPeriods = 4;
  repeated int64 neighbors = 5;
  map<int64, int64> metadata = 9;
}

message TerritoryTakeoverPeriod {
  int32 duration = 1;
  int32 startHour = 2;
  int32 weekday = 3;
  int32 region = 4;
  int32 type = 5;
  map<int64, int64> joinCosts = 6;
}

message TerritoryTakeover {
  int64 territoryId = 1;
  google.protobuf.Timestamp startTime = 3;
  google.protobuf.Timestamp endTime = 4;
  map<int64, int32> scores = 5;
}

message TerritoryOwner {
  int64 territoryId = 1;
  int64 ownerId = 2;
  TerritoryOwnerVisualData visuals = 3;
}

message TerritoryOwnerVisualData {
  int64 ownerId = 1;
  int32 floorColour = 2;
  int32 wallColour = 3;
}

message TerritoryServiceSpec {
  int64 id = 1;
  IdRefs idRefs = 2;
  int64 serviceType = 3;
  map<int32, string> serviceConfig = 4;
  map<int64, int64> costs = 5;
  Rarity rarity = 6;
}

message ActiveTerritoryServiceItem {
  int64 serviceId = 1;
  map<int32, string> serviceConfig = 2;
}

message ActiveTerritoryService {
  int64 territoryId = 1;
  repeated ActiveTerritoryServiceItem services = 2;
}

message TerritoryServiceSlot {
  int64 availableService = 1;
  int64 upcomingService = 2;
}

message TerritoriesStaticDataResponse {
  map<int64, Territory> territories = 1;
  map<int64, TerritoryServiceSpec> services = 2;
}

message AllTerritoryOwnersResponse {
  map<int64, TerritoryOwner> territoryOwners = 1;
}

message TerritoryOwnerResponse {
  TerritoryOwner territoryOwner = 1;
}

message AllTerritoryTakeoversResponse {
  map<int64, TerritoryTakeover> territoryTakeovers = 1;
}

message TerritoryTakeoverResponse {
  TerritoryTakeover territoryTakeover = 1;
}

message CanJoinTakeoverResponseData {
  int64 allianceId = 1;
  int64 territoryId = 2;
  bool rank = 4;
  bool adjacent = 5;
  bool emmissary = 6;
  bool activeTakeover = 7;
  map<int64, bool> resources = 8;
  bool inHomeServer = 9;
}

message CanJoinTakeoverResponse {
  CanJoinTakeoverResponseData canJoinTakeover = 1;
}

message ActiveTerritoryServicesResponse {
  map<int64, ActiveTerritoryService> activeServices = 1;
}

message TerritoryServiceSlotsResponse {
  repeated TerritoryServiceSlot territoryServiceSlots = 1;
  int64 territoryId = 2;
}

message AllianceTerritorySlotsResponse {
  AllianceTerritorySlots allianceTerritorySlots = 1;
}

message CanActivateTerritoryServiceResponse {
enum FailureReason {
  FAILUREREASON_USERNOTINALLIANCE = 0;
  FAILUREREASON_TERRITORYOWNERSHIP = 1;
  FAILUREREASON_USERPERMISSION = 2;
  FAILUREREASON_RESOURCES = 3;
  FAILUREREASON_TERRITORYCONTIGUITY = 4;
  FAILUREREASON_SERVICENOTAVAILABLE = 5;
}

  bool canActivateService = 1;
  FailureReason reason = 2;
}

message ActiveTrait {
  int64 traitId = 1;
  int32 level = 2;
}

message ActiveOfficerTraits {
  int64 officerId = 1;
  map<int64, ActiveTrait> activeTraits = 2;
}

message OfficerTraitsResponse {
  map<int64, ActiveOfficerTraits> activeOfficerTraits = 1;
}

message GetResourceGroupsResponse {
  repeated ResourceGroup resourceGroups = 1;
}

message ResourceGroup {
  int64 resourceGroupId = 1;
  string resourceGroupIdStr = 2;
}

message OptimisedGalaxyResponse {
  OptimisedGalaxy optimisedGalaxy = 1;
}

message NodeMissionsResponse {
  repeated Mission missionSpecs = 1;
}

message AvailableMissionsResponse {
  map<int64, MissionLocationContainer> missionMapping = 1;
}

message MissionSpecsResponse {
  repeated Mission missionSpecs = 1;
  map<int64, MissionLocationContainer> missionMapping = 2;
}

message ActiveMissionsResponse {
  repeated ActiveMission activeMissions = 1;
}

message CompletedMissionsResponse {
  repeated int64 completedMissions = 1;
}

message ScrapyardJobResponse {
  string id = 1;
}

message UserProfile {
  string userId = 1;
  string name = 2;
  int32 level = 3;
  int32 levelLastAwarded = 4;
  uint64 xp = 5;
  int64 allianceId = 6;
  int32 ftueStage = 7;
  uint64 militaryMight = 8;
  uint64 battleRating = 9;
  map<int64, int64> cosmetics = 10;
  int32 gameworldId = 11;
  bool isMentor = 12;
}

message UserProfileSettings {
  bool anonymousPurchases = 1;
  bool disabledArmadaPushNotifications = 2;
}

message UserProfilesResponse {
  repeated UserProfile userProfiles = 1;
}

message UserProfileSettingsResponse {
  UserProfileSettings userProfileSettings = 1;
}

message HostileWaveInfo {
  string hostileName = 1;
  int32 amount = 3;
  int32 level = 4;
}

message Wave {
  int32 waveNumber = 1;
  int32 totalHostiles = 2;
  repeated HostileWaveInfo hostileFleets = 3;
}

message WavesSpec {
  int64 id = 1;
  string idStr = 2;
  int32 totalWaves = 3;
  map<int64, Wave> waves = 4;
}

message ChallengeSpec {
  int64 entryCostAmount = 1;
  int64 entryCostResourceId = 2;
  int64 id = 3;
  string idStr = 4;
  int32 maxAllowedDamage = 5;
  int32 maxPlayers = 6;
  int32 totalWaves = 7;
  int32 fleetsPerPlayer = 8;
  int32 requiredLevel = 9;
  int32 countdownDuration = 10;
}

message WaveRewardSpec {
  int64 id = 1;
  string idStr = 2;
  map<int32, WaveRewardList> waveRewardMap = 3;
}

message WaveRewardList {
  repeated InventoryItem rewardList = 1;
}

message WaveDefenseSystem {
  int64 challengeId = 1;
  int32 status = 2;
  int64 wdChallengeId = 3;
  int64 systemId = 4;
}

message PlayerFleetList {
  repeated int64 fleetList = 1;
}

message WaveDefenseChallenge {
  int64 id = 1;
  int64 challengeId = 2;
  int64 systemId = 3;
  int32 totalWaves = 4;
  int32 currentWave = 5;
  int32 status = 6;
  int32 centralEntityHp = 7;
  google.protobuf.Timestamp startTime = 8;
  map<string, PlayerFleetList> playerFleetsMap = 9;
  string leader = 10;
}

message WaveDefenseStaticDataResponse {
  map<int64, ChallengeSpec> challenges = 1;
  map<int64, WavesSpec> waves = 2;
  map<int64, WaveRewardSpec> rewards = 3;
}

message WaveDefensePartyDataResponse {
  Party party = 1;
}

message WaveDefenseSyncDataResponse {
  map<int64, WaveDefenseSystem> waveDefenseSystems = 1;
}

message WaveDefenseChallengeDataResponse {
  WaveDefenseChallenge waveDefenseChallenge = 1;
}

message Wormhole {
  int64 allianceId = 1;
  int64 systemId = 2;
  string ownerId = 3;
  int32 usageCount = 4;
  int32 maxUsages = 5;
  google.protobuf.Timestamp expirationTimestamp = 6;
  int32 minLevel = 7;
  int32 instanceId = 8;
  map<int64, int32> travelCost = 9;
}

message ActiveWormholesResponse {
  repeated Wormhole wormholes = 1;
}

message OfficerRank {
  int32 rank = 1;
  repeated Digit.PrimeServer.Models.Resource costs = 2;
  int32 shardsRequired = 3;
  int32 maxLevel = 4;
  int32 ratingFactor = 5;
}
